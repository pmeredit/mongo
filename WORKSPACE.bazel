load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("//bazel/toolchains:mongo_toolchain.bzl", "setup_mongo_toolchains")

http_archive(
    name = "aspect_rules_lint",
    sha256 = "f60e4a737a5e09402f5fa3bd182efa80dac5523ca4b9bc5c6fa8c06fbfb46630",
    strip_prefix = "rules_lint-1.1.0",
    url = "https://github.com/aspect-build/rules_lint/releases/download/v1.1.0/rules_lint-v1.1.0.tar.gz",
)

setup_mongo_toolchains()

http_archive(
    name = "windows_sasl",
    build_file_content = """
package(default_visibility = ["//visibility:public"])

filegroup(
    name = "includes",
    srcs = select({
        "@platforms//os:windows": glob(["include/**/*.h"]),
        "//conditions:default": [],
    }),
)

filegroup(
    name = "libraries",
    srcs = select({
        "@platforms//os:windows": glob(["lib/**/*"]),
        "//conditions:default": [],
    }),
)

filegroup(
    name = "bins",
    srcs = select({
        "@platforms//os:windows": glob(["bin/**/*"]),
        "//conditions:default": [],
    }),
)
    """,
    sha256 = "3e22e2b16f802277123590f64dfda44f1c9c8a2b7e758180cd956d8ab0965817",
    urls = [
        "https://s3.amazonaws.com/boxes.10gen.com/build/windows_cyrus_sasl-2.1.28.zip",
    ] * 5,
)

http_archive(
    name = "wix_toolset",
    build_file_content = """
package(default_visibility = ["//visibility:public"])

filegroup(
    name = "wix_binaries",
    srcs = select({
        "@platforms//os:windows": glob(["*"]),
        "//conditions:default": [],
    }),
)

filegroup(
    name = "candle",
    srcs = select({
        "@platforms//os:windows": ["candle.exe"],
        "//conditions:default": [],
    }),
    data = select({
        "@platforms//os:windows": [":wix_binaries"],
        "//conditions:default": [],
    }),
)

filegroup(
    name = "light",
    srcs = select({
        "@platforms//os:windows": ["light.exe"],
        "//conditions:default": [],
    }),
    data = select({
        "@platforms//os:windows": [":wix_binaries"],
        "//conditions:default": [],
    }),
)
    """,
    sha256 = "6ac824e1642d6f7277d0ed7ea09411a508f6116ba6fae0aa5f2c7daa2ff43d31",
    urls = [
        "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip",
    ] * 5,
)

load("//bazel/install_rules:windows_msvc.bzl", "windows_msvc")

windows_msvc(
    name = "local_windows_msvc",
)

load("//bazel/coverity:coverity_toolchain.bzl", "coverity_toolchain")

coverity_toolchain(
    name = "rules_coverity",
)

load("@rules_coverity//coverity:repositories.bzl", "rules_coverity_toolchains")

rules_coverity_toolchains()

load("@rules_poetry//rules_poetry:poetry.bzl", "poetry")

poetry(
    name = "poetry",
    excludes = [
        "mdit-py-plugins",  # plugins for markdown-it-py. Introduces an optional circular dependency that bazel does not like.
    ],
    lockfile = "//:poetry.lock",
    pyproject = "//:pyproject.toml",
    python_interpreter_target_default = "@py_host//:dist/bin/python3",
    python_interpreter_target_mac = "@py_host//:dist/bin/python3",
    python_interpreter_target_win = "@py_host//:dist/python.exe",
)

load("@aspect_rules_js//js:toolchains.bzl", "DEFAULT_NODE_VERSION", "rules_js_register_toolchains")

rules_js_register_toolchains(node_version = DEFAULT_NODE_VERSION)

load("@aspect_rules_js//npm:repositories.bzl", "npm_translate_lock")

npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)

load("@npm//:repositories.bzl", "npm_repositories")

npm_repositories()

# Sub in the system openssl for boringssl since we don't want two implementations of
# ssl in the same address space.
new_local_repository(
    name = "boringssl",
    build_file_content = """
cc_library(
  name = "crypto",
  linkopts = ["-lcrypto"],
  visibility = ["//visibility:public"],
)
cc_library(
  name = "ssl",
  linkopts = ["-lssl"],
  visibility = ["//visibility:public"],
)
""",
    path = "bazel/_openssl_placeholder_for_grpc",
)

# Overloads for the vendored repositories.
#
# WARNING: Don't change the order of the deps() calls and local_repositories.
#          They're read linearly dependencies that come first override later
#          ones. Dependency updates might change the correct order, though it's
#          unlikely. This is obviously a temporary solution and will no longer
#          be necessary once migration to bzlmod is complete.

# Note: rules_python is implicitly loaded with a grpc-compatible version.

load("//bazel/install_rules:pigz.bzl", "setup_pigz")

setup_pigz(
    name = "pigz",
)

load("//bazel/format:shfmt.bzl", "shfmt")

shfmt()

# This repository is normally created by db-contrib-tool or manually extracting the binaries at the proper location
new_local_repository(
    name = "mongot_localdev",
    build_file_content = """
package(default_visibility = ["//visibility:public"])
filegroup(
    name = "mongot_binaries",
    srcs = glob(["**"], exclude = ["BUILD.bazel", "WORKSPACE", "MODULE.bazel", "MODULE.bazel.lock"]),
)
""",
    path = "mongot-localdev",
)

local_repository(
    name = "bazel_rules_mongo",
    path = "buildscripts/bazel_rules_mongo",
    repo_mapping = {"@poetry": "@poetry_bazel_rules_mongo"},
)

load("@bazel_rules_mongo//codeowners:codeowners_validator.bzl", "codeowners_validator")

codeowners_validator()

poetry(
    name = "poetry_bazel_rules_mongo",
    lockfile = "@bazel_rules_mongo//:poetry.lock",
    pyproject = "@bazel_rules_mongo//:pyproject.toml",
)


# Import rust and bindgen for plugins.
http_archive(
    name = "rules_rust",
    integrity = "sha256-CeF7R8AVBGVjGqMZ8nQnYKQ+3tqy6cAS+R0K4u/wImg=",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.59.2/rules_rust-0.59.2.tar.gz"],
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

rust_register_toolchains(edition = "2021")

http_archive(
    name = "rules_rust_bindgen",
    integrity = "sha256-CeF7R8AVBGVjGqMZ8nQnYKQ+3tqy6cAS+R0K4u/wImg=",
    strip_prefix = "extensions/bindgen",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.59.2/rules_rust-0.59.2.tar.gz"],
)

load("@rules_rust_bindgen//:repositories.bzl", "rust_bindgen_dependencies", "rust_bindgen_register_toolchains")

rust_bindgen_dependencies()

rust_bindgen_register_toolchains()

load("@rules_rust_bindgen//:transitive_repositories.bzl", "rust_bindgen_transitive_dependencies")

rust_bindgen_transitive_dependencies()

load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")

crate_universe_dependencies()

load("@rules_rust//crate_universe:defs.bzl", "crate", "crates_repository", "render_config")

crates_repository(
    name = "plugin_crates",
    cargo_lockfile = "//:Cargo.lock",
    lockfile = "//:Cargo.Bazel.lock",
    packages = {
        "bson": crate.spec(
            version = "2.13.0",
        ),
        "bytes": crate.spec(
            version = "1.10.0",
        ),
        "once_cell": crate.spec(
            version = "1.20.3",
        ),
        "tonic-build": crate.spec(
            version = "0.12.3",
        ),
        "tonic": crate.spec(
            features = ["default"],
            version = "0.12.3",
        ),
        "tokio": crate.spec(
            features = ["full"],
            version = "1.43.0",
        ),
        "serde": crate.spec(
            features = ["derive"],
            version = "1.0.217",
        ),
        "reqwest": crate.spec(
            features = ["json"],
            version = "0.11",
        ),
    },
    render_config = render_config(default_package_name = ""),
)

load("@plugin_crates//:defs.bzl", "crate_repositories")

crate_repositories()
