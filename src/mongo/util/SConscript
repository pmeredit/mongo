# -*- mode: python -*-

from site_scons.mongo import insort_wrapper

Import(
    [
        "endian",
        "env",
        "get_option",
        "has_option",
        "use_libunwind",
        "use_system_version_of_library",
        "version_extra",
        "version_parts",
    ]
)

env = env.Clone()

env.InjectThirdParty("asio")

js_engine_ver = get_option("js-engine") if get_option("server-js") == "on" else "none"

module_list = ",\n".join(['"{0}"_sd'.format(x) for x in env["MONGO_MODULES"]])


# Render the MONGO_BUILDINFO_ENVIRONMENT_DATA dict into an initializer for a
# `std::vector<VersionInfoInterface::BuildInfoField>`.
def fmtBuildInfo(data):
    def fmtBool(val):
        return "true" if val else "false"

    def fmtStr(val):
        return 'R"({0})"_sd'.format(val.replace("\\", r"\\"))

    def fmtObj(obj):
        return "{{{}, {}, {}, {}}}".format(
            fmtStr(obj["key"]),
            fmtStr(env.subst(obj["value"])),
            fmtBool(obj["inBuildInfo"]),
            fmtBool(obj["inVersion"]),
        )

    return ",\n".join([fmtObj(obj) for _, obj in data.items()])


buildInfoInitializer = fmtBuildInfo(env["MONGO_BUILDINFO_ENVIRONMENT_DATA"])

generatedVersionFile = env.Substfile(
    "version_constants.h.in",
    SUBST_DICT=[
        ("@mongo_version@", env["MONGO_VERSION"]),
        ("@mongo_version_major@", version_parts[0]),
        ("@mongo_version_minor@", version_parts[1]),
        ("@mongo_version_patch@", version_parts[2]),
        ("@mongo_version_extra@", version_parts[3]),
        ("@mongo_version_extra_str@", version_extra),
        ("@mongo_git_hash@", env["MONGO_GIT_HASH"]),
        ("@buildinfo_js_engine@", js_engine_ver),
        ("@buildinfo_allocator@", env["MONGO_ALLOCATOR"]),
        ("@buildinfo_modules@", module_list),
        ("@buildinfo_environment_data@", buildInfoInitializer),
    ],
)
env.Alias("generated-sources", generatedVersionFile)

if env.TargetOSIs("windows"):
    enterpriseEnv = env.Clone().InjectModule("enterprise")
    generatedResourceConstantFile = enterpriseEnv.Substfile(
        "resource_constants.h.in",
        SUBST_DICT=[
            ("@mongo_version@", env["MONGO_VERSION"]),
            ("@mongo_version_major@", version_parts[0]),
            ("@mongo_version_minor@", version_parts[1]),
            ("@mongo_version_patch@", version_parts[2]),
            ("@mongo_git_hash@", env["MONGO_GIT_HASH"]),
        ],
    )
    env.Alias("generated-sources", generatedResourceConstantFile)

env.SConscript(
    must_exist=1,
    dirs=[
        "concurrency",
        "cryptd",
        "immutable",
        "net",
        "options_parser",
        "tracing_profiler",
    ],
    exports=[
        "env",
        "version_extra",
        "version_parts",
    ],
)

env.Library(
    target="version_impl",
    source=[
        "version_impl.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
    ],
)

env.Benchmark(
    target="fail_point_bm",
    source=[
        "fail_point_bm.cpp",
    ],
    LIBDEPS=[
        "fail_point",
    ],
)

env.CppUnitTest(
    target="concurrent_shared_values_map_test",
    source=[
        "concurrent_shared_values_map_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
    ],
)

env.CppUnitTest(
    target="tracing_support_test",
    source=[
        "tracing_support_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/util/clock_source_mock",
        "$BUILD_DIR/mongo/util/tracing_support",
    ],
)

env.CppUnitTest(
    target="thread_safety_context_test",
    source=[
        "thread_safety_context_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
    ],
)

tcmallocAttrs = None
for impl in [
    {
        # Modern standalone tcmalloc (not gperftools)
        "options": ["tcmalloc-google"],
        "sys_name": "tcmalloc-google",
        "inject": "tcmalloc",
        "cppdefs": [],
    },
    {
        # Old gperftools tcmalloc
        "options": ["tcmalloc-gperf"],
        "sys_name": "tcmalloc-gperf",
        "inject": "gperftools",
        # If our changes to tcmalloc are ever upstreamed, this should become set based on a top
        # level configure check, though its effects should still be scoped just to these files.
        "cppdefs": [
            "MONGO_HAVE_GPERFTOOLS_SIZE_CLASS_STATS",
        ],
    },
]:
    if env["MONGO_ALLOCATOR"] in impl["options"]:
        tcmallocAttrs = impl

if tcmallocAttrs:
    tcmspEnv = env.Clone()
    if not use_system_version_of_library(tcmallocAttrs["sys_name"]):
        tcmspEnv.InjectThirdParty(tcmallocAttrs["inject"])
    tcmspEnv.Append(CPPDEFINES=tcmallocAttrs["cppdefs"])

    if tcmspEnv.ToolchainIs("clang", "GCC"):
        tcmspEnv.Append(CCFLAGS=["-Wno-sign-compare"])

    if not use_system_version_of_library("valgrind"):
        # Include valgrind since tcmalloc disables itself while running under valgrind
        tcmspEnv.InjectThirdParty("valgrind")

    tcmspEnv.Library(
        target="allocator_thread",
        source=[
            "allocator_tcmalloc_thread.cpp",
        ],
        LIBDEPS_PRIVATE=[
            "$BUILD_DIR/mongo/db/server_base",
            "$BUILD_DIR/mongo/db/service_context",
            "tcmalloc_server_status",
            "tcmalloc_set_parameter",
        ],
    )

    tcmspEnv.Library(
        target="tcmalloc_set_parameter",
        source=[
            "tcmalloc_set_parameter.cpp",
            "tcmalloc_parameters_gen.cpp",
        ],
        LIBDEPS_PRIVATE=[
            "$BUILD_DIR/mongo/db/server_base",
            "processinfo",
        ],
        LIBDEPS_TAGS=[
            "lint-allow-bidirectional-edges",
            "lint-allow-nonprivate-on-deps-dependents",
        ],
    )

    tcmspEnv.Library(
        target="tcmalloc_server_status",
        source=[
            "tcmalloc_server_status_section.cpp",
            "heap_profiler.cpp",
        ],
        LIBDEPS_PRIVATE=[
            "$BUILD_DIR/mongo/base",
            "$BUILD_DIR/mongo/db/commands/server_status_core",
            "$BUILD_DIR/mongo/db/server_base",
            "processinfo",
            "tcmalloc_set_parameter",
        ],
    )

    tcmspEnv.CppUnitTest(
        target="tcmalloc_set_parameters_test",
        source=[
            "tcmalloc_set_parameter_test.cpp",
        ],
        LIBDEPS=[
            "$BUILD_DIR/mongo/db/commands/server_status_core",
            "$BUILD_DIR/mongo/db/server_base",
            "processinfo",
            "tcmalloc_server_status",
            "tcmalloc_set_parameter",
        ],
    )
else:
    env.Library(
        target="allocator_thread",
        source=[
            "allocator_system_thread.cpp",
        ],
        LIBDEPS_PRIVATE=[
            "$BUILD_DIR/mongo/db/server_base",
        ],
    )

env.Benchmark(
    target="clock_source_bm",
    source=[
        "clock_source_bm.cpp",
    ],
    LIBDEPS=[
        "clock_sources",
        "processinfo",
    ],
    CONSOLIDATED_TARGET="first_half_bm",
)

env.CppUnitTest(
    target="executor_stats_test",
    source=[
        "executor_stats_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/util/clock_source_mock",
        "$BUILD_DIR/mongo/util/executor_stats",
    ],
)

env.Benchmark(
    target="decimal_counter_bm",
    source=[
        "decimal_counter_bm.cpp",
    ],
    LIBDEPS=[],
    CONSOLIDATED_TARGET="first_half_bm",
)

env.Benchmark(
    target="itoa_bm",
    source=[
        "itoa_bm.cpp",
    ],
    LIBDEPS=[],
)

env.Benchmark(
    target="future_bm",
    source=[
        "future_bm.cpp",
    ],
    LIBDEPS=[],
)

env.Benchmark(
    target="tick_source_bm",
    source=[
        "tick_source_bm.cpp",
    ],
    LIBDEPS=[],
    CONSOLIDATED_TARGET="first_half_bm",
)

pcre_env = env.Clone()
pcre_env.InjectThirdParty(libraries=["pcre2"])
env.Benchmark(
    target="tracking_allocator_bm",
    source=[
        "tracking_allocator_bm.cpp",
    ],
    LIBDEPS=[],
)

env.CppUnitTest(
    target="tracking_allocator_test",
    source=[
        "tracking_allocator_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/db/service_context_test_fixture",
    ],
)

env.Benchmark(
    target="hash_table_bm",
    source="hash_table_bm.cpp",
    LIBDEPS=[],
)

icuEnv = env.Clone()

if not use_system_version_of_library("icu"):
    icuEnv.InjectThirdParty("icu")
    # Since we are injecting the third-party ICU headers, we must also copy the same defines that we
    # use to configure ICU when building ICU sources. See comment in
    # src/third_party/icu4c-57.1/source/SConscript.
    icuEnv.Append(
        CPPDEFINES=[
            ("UCONFIG_NO_BREAK_ITERATION", 1),
            ("UCONFIG_NO_FORMATTING", 1),
            ("UCONFIG_NO_TRANSLITERATION", 1),
            ("UCONFIG_NO_REGULAR_EXPRESSIONS", 1),
            ("U_CHARSET_IS_UTF8", 1),
            ("U_STATIC_IMPLEMENTATION", 1),
            ("U_USING_ICU_NAMESPACE", 0),
        ],
    )


icuEnv.CppUnitTest(
    target="util_test",
    source=[
        "alarm_test.cpp",
        "aligned_test.cpp",
        "assert_util_test.cpp",
        "background_job_test.cpp",
        "background_thread_clock_source_test.cpp",
        "base64_test.cpp",
        "cancellation_test.cpp",
        "clock_source_mock_test.cpp",
        "container_size_helper_test.cpp",
        "ctype_test.cpp",
        "decimal_counter_test.cpp",
        "decorable_test.cpp",
        "dns_name_test.cpp",
        "dns_query_test.cpp",
        "duration_test.cpp",
        "dynamic_bitset_test.cpp",
        "dynamic_catch_test.cpp",
        "errno_util_test.cpp",
        "fail_point_test.cpp",
        "fixed_string_test.cpp",
        "functional_test.cpp",
        "future_test_edge_cases.cpp",
        "future_test_executor_future.cpp",
        "future_test_future_int.cpp",
        "future_test_future_move_only.cpp",
        "future_test_future_void.cpp",
        "future_test_valid.cpp",
        "future_test_promise_int.cpp",
        "future_test_promise_void.cpp",
        "future_test_shared_future.cpp",
        "future_util_test.cpp",
        "histogram_test.cpp",
        "hierarchical_acquisition_test.cpp",
        "icu_test.cpp",
        "inlined_storage_test.cpp",
        "inline_memory_test.cpp",
        "interruptible_test.cpp",
        "invalidating_lru_cache_test.cpp",
        "itoa_test.cpp",
        "latency_distribution_test.cpp",
        "lockable_adapter_test.cpp",
        "log_with_sampling_test.cpp",
        "lru_cache_test.cpp",
        "md5_test.cpp",
        "concurrent_memory_aggregator_test.cpp",
        "memory_usage_tracker_test.cpp",
        "optional_util_test.cpp",
        "out_of_line_executor_test.cpp",
        "overloaded_visitor_test.cpp",
        "packaged_task_test.cpp",
        "pcre_test.cpp",
        "pcre_util_test.cpp",
        "periodic_runner_impl_test.cpp",
        "processinfo_test.cpp",
        "procparser_test.cpp" if env.TargetOSIs("linux") else [],
        "producer_consumer_queue_test.cpp",
        "progress_meter_test.cpp",
        "read_through_cache_test.cpp",
        "registry_list_test.cpp",
        "represent_as_test.cpp",
        "roaring_bitmaps_test.cpp",
        "safe_num_test.cpp",
        "shared_buffer_test.cpp",
        "scoped_unlock_test.cpp",
        "secure_zero_memory_test.cpp",
        "static_immortal_test.cpp",
        "str_test.cpp",
        "string_map_test.cpp",
        "strong_weak_finish_line_test.cpp",
        "summation_test.cpp",
        "text_test.cpp",
        "tick_source_test.cpp",
        "time_support_test.cpp",
        "timer_test.cpp",
        "util_sort_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
        "$BUILD_DIR/mongo/db/auth/authmocks",
        "$BUILD_DIR/mongo/db/service_context_non_d",
        "$BUILD_DIR/mongo/db/service_context_test_fixture",
        "$BUILD_DIR/mongo/executor/thread_pool_task_executor_test_fixture",
        "$BUILD_DIR/third_party/croaring/croaring",
        "$BUILD_DIR/third_party/tomcrypt-1.18.2/tomcrypt_md5",
        "alarm",
        "background_job",
        "caching",
        "clock_source_mock",
        "clock_sources",
        "concurrency/thread_pool",
        "dns_query",
        "fail_point",
        "future_util",
        "icu",
        "pcre_util",
        "pcre_wrapper",
        "periodic_runner_impl",
        "processinfo",
        "procparser" if env.TargetOSIs("linux") else [],
        "progress_meter",
        "safe_num",
        "secure_zero_memory",
        "summation",
        "version_impl",
    ],
)

if not env.TargetOSIs("windows"):
    icuEnv.CppUnitTest(
        target="signal_handlers_test",
        source=[
            "signal_handlers_asynchronous_test.cpp",
            "signal_handlers_synchronous_test.cpp",
        ],
        LIBDEPS=[
            "$BUILD_DIR/mongo/base",
            "$BUILD_DIR/mongo/db/service_context_non_d",
            "signal_handlers",
        ],
    )

if env.TargetOSIs("windows"):
    env.CppUnitTest(
        target="util_windows_test",
        source=[
            "ntservice_test.cpp",
            "perfctr_collect_test.cpp",
        ],
        LIBDEPS=[
            "ntservice",
            "perfctr_collect",
        ],
        LIBS=[
            "shell32",
            env["LIBS"],
        ],
    )

env.Benchmark(target="base64_bm", source="base64_bm.cpp", CONSOLIDATED_TARGET="first_half_bm")

stacktraceEnv = env.Clone()
if use_libunwind:
    stacktraceEnv.InjectThirdParty(libraries=["unwind"])
    stacktraceEnv.CppUnitTest(
        target=[
            "stacktrace_libunwind_test",
        ],
        source=[
            "stacktrace_libunwind_test_functions.cpp",
            "stacktrace_libunwind_test.cpp",
        ],
        # Do not add LIBDEPS the ordinary way here, as they will override
        # the LIBDEPS settings for stacktraceEnv, configured above. If
        # you must add new libdeps here, or for the similar cases
        # below, do it as follows:
        #
        # LIBDEPS=(stacktraceEnv.get('LIBDEPS', []) + [
        #     some_new_libdep,
        #     another_new_libdep,
        # ]),
        #
        # to ensure that the new library dependency is added to the
        # existing LIBDEPS state in the environment and does not
        # overwrite it.
    )

stacktrace_test_LIBDEPS = stacktraceEnv.get("LIBDEPS", []).copy()
insort_wrapper(stacktrace_test_LIBDEPS, "pcre_wrapper")

stacktraceEnv.CppUnitTest(
    target="stacktrace_test",
    source=[
        "stacktrace_test.cpp",
    ],
    LIBDEPS=stacktrace_test_LIBDEPS,
    EXPORT_SYMBOLS=[
        "mongo_stacktrace_test_detail_testFunctionWithLinkage",
    ],
)

stacktraceEnv.Benchmark(
    target="stacktrace_bm",
    source="stacktrace_bm.cpp",
    # See above for how to handle any future LIBDEPS additions here.
    # LIBDEPS=...
)

env.Benchmark(
    target="string_bm",
    source="string_bm.cpp",
)

env.Benchmark(
    target="cancellation_bm",
    source="cancellation_bm.cpp",
)

env.Benchmark(
    target="inline_memory_bm",
    source="inline_memory_bm.cpp",
)

env.Benchmark(
    target="uuid_bm",
    source=[
        "uuid_bm.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
        "processinfo",
    ],
    CONSOLIDATED_TARGET="first_half_bm",
)

pretty_printer_test_program = env.Program(
    target="pretty_printer_test_program",
    source=[
        "pretty_printer_test_program.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
    ],
    AIB_COMPONENT="pretty-printer-tests",
    AIB_COMPONENTS_EXTRA=["dist-test"],
)
pretty_printer_test_program_installed = env.GetAutoInstalledFiles(pretty_printer_test_program[0])

env.PrettyPrinterTest("pretty_printer_test.py", TEST_PROGRAM=pretty_printer_test_program_installed)
