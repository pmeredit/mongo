# -*- mode: python -*-

from site_scons.mongo import insort_wrapper

Import(
    [
        "endian",
        "env",
        "use_libunwind",
        "use_system_version_of_library",
        "version_extra",
        "version_parts",
    ]
)

env = env.Clone()

env.InjectThirdParty("asio")

if env.TargetOSIs("windows"):
    enterpriseEnv = env.Clone().InjectModule("enterprise")
    generatedResourceConstantFile = enterpriseEnv.Substfile(
        "resource_constants.h.in",
        SUBST_DICT=[
            ("@mongo_version@", env["MONGO_VERSION"]),
            ("@mongo_version_major@", version_parts[0]),
            ("@mongo_version_minor@", version_parts[1]),
            ("@mongo_version_patch@", version_parts[2]),
            ("@mongo_git_hash@", env["MONGO_GIT_HASH"]),
        ],
    )
    env.Alias("generated-sources", generatedResourceConstantFile)

env.SConscript(
    must_exist=1,
    dirs=[
        "concurrency",
        "immutable",
        "net",
        "options_parser",
        "tracing_profiler",
        "tracking",
    ],
    exports=[
        "env",
        "version_extra",
        "version_parts",
    ],
)

env.Benchmark(
    target="fail_point_bm",
    source=[],
    LIBDEPS=[],
)

env.CppUnitTest(
    target="concurrent_shared_values_map_test",
    source=[],
    LIBDEPS=[],
    PROVE_ALIASES=["server-programmability"],
)

env.CppUnitTest(
    target="tracing_support_test",
    source=[],
    LIBDEPS=[],
)

env.CppUnitTest(
    target="thread_safety_context_test",
    source=[],
    LIBDEPS=[],
    PROVE_ALIASES=["server-programmability"],
)

env.CppUnitTest(
    target="versioned_value_test",
    source=[],
    LIBDEPS=[],
    PROVE_ALIASES=["server-programmability"],
)

if env["MONGO_ALLOCATOR"] in set(["tcmalloc-google", "tcmalloc-gperf"]):
    env.CppUnitTest(
        target="tcmalloc_set_parameters_test",
        source=[],
    )

env.Benchmark(
    target="clock_source_bm",
    source=[],
    LIBDEPS=[],
    BAZEL_BENCHMARK_TAG="first_half_bm",
)

env.CppUnitTest(
    target="executor_stats_test",
    source=[],
    LIBDEPS=[],
    PROVE_ALIASES=["server-programmability"],
)

env.Benchmark(
    target="decimal_counter_bm",
    source=[],
    LIBDEPS=[],
    BAZEL_BENCHMARK_TAG="first_half_bm",
)

env.Benchmark(
    target="itoa_bm",
    source=[],
    LIBDEPS=[],
)

env.Benchmark(
    target="future_bm",
    source=[],
    LIBDEPS=[],
    BAZEL_BENCHMARK_TAG="first_half_bm",
)

env.Benchmark(
    target="tick_source_bm",
    source=[],
    LIBDEPS=[],
    BAZEL_BENCHMARK_TAG="first_half_bm",
)

pcre_env = env.Clone()
pcre_env.InjectThirdParty(libraries=["pcre2"])

env.Benchmark(
    target="hash_table_bm",
    source=[],
    LIBDEPS=[],
)

icuEnv = env.Clone()

if not use_system_version_of_library("icu"):
    icuEnv.InjectThirdParty("icu")
    # Since we are injecting the third-party ICU headers, we must also copy the same defines that we
    # use to configure ICU when building ICU sources. See comment in
    # src/third_party/icu4c-57.1/source/SConscript.
    icuEnv.Append(
        CPPDEFINES=[
            ("UCONFIG_NO_BREAK_ITERATION", 1),
            ("UCONFIG_NO_FORMATTING", 1),
            ("UCONFIG_NO_TRANSLITERATION", 1),
            ("UCONFIG_NO_REGULAR_EXPRESSIONS", 1),
            ("U_CHARSET_IS_UTF8", 1),
            ("U_STATIC_IMPLEMENTATION", 1),
            ("U_USING_ICU_NAMESPACE", 0),
        ],
    )


icuEnv.CppUnitTest(
    target="util_test",
    source=[],
    LIBDEPS=[],
    PROVE_ALIASES=["server-programmability"],
)

if not env.TargetOSIs("windows"):
    icuEnv.CppUnitTest(
        target="signal_handlers_test",
        source=[],
        LIBDEPS=[],
        PROVE_ALIASES=["server-programmability"],
    )

if env.TargetOSIs("windows"):
    env.CppUnitTest(
        target="util_windows_test",
        source=[],
        LIBDEPS=[],
    )

env.Benchmark(target="base64_bm", source=[], BAZEL_BENCHMARK_TAG="first_half_bm")

stacktraceEnv = env.Clone()
if use_libunwind:
    stacktraceEnv.InjectThirdParty(libraries=["unwind"])
    stacktraceEnv.CppUnitTest(
        target="stacktrace_libunwind_test",
        source=[],
        PROVE_ALIASES=["server-programmability"],
    )

stacktrace_test_LIBDEPS = stacktraceEnv.get("LIBDEPS", []).copy()
insort_wrapper(stacktrace_test_LIBDEPS, "pcre_wrapper")

stacktraceEnv.CppUnitTest(
    target="stacktrace_test",
    source=[],
    PROVE_ALIASES=["server-programmability"],
)

stacktraceEnv.Benchmark(
    target="stacktrace_bm",
    source=[],
    # See above for how to handle any future LIBDEPS additions here.
    # LIBDEPS=...
    BAZEL_BENCHMARK_TAG="first_half_bm",
)

env.Benchmark(
    target="string_bm",
    source=[],
    BAZEL_BENCHMARK_TAG="first_half_bm",
)

env.Benchmark(
    target="cancellation_bm",
    source=[],
)

env.Benchmark(
    target="inline_memory_bm",
    source=[],
)

env.Benchmark(
    target="uuid_bm",
    source=[],
    LIBDEPS=[],
    BAZEL_BENCHMARK_TAG="first_half_bm",
)

pretty_printer_test_program = env.BazelProgram(
    target="pretty_printer_test_program",
    source=[],
    AIB_COMPONENT="pretty-printer-tests",
    AIB_COMPONENTS_EXTRA=["dist-test"],
)
pretty_printer_test_program_installed = env.GetAutoInstalledFiles(pretty_printer_test_program[0])

env.PrettyPrinterTest("pretty_printer_test.py", TEST_PROGRAM=pretty_printer_test_program_installed)
