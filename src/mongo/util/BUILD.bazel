load("//bazel:mongo_src_rules.bzl", "idl_generator", "mongo_cc_library")
load("//bazel/config:render_template.bzl", "render_template")

package(default_visibility = ["//visibility:public"])

exports_files(
    glob(["*.h"]) + glob(["*.cpp"]),
)

# Headers designed to be used without source code. Split these out
# into targets if they're meant to be used with source code.
filegroup(
    name = "headers",
    srcs = [
        "cancellation.h",
        "database_name_util.h",
        "fail_point.h",
        "inline_memory.h",
        "log_with_sampling.h",
        "make_array_type.h",
        "namespace_string_util.h",
        "overloaded_visitor.h",
        "periodic_runner.h",
        "safe_num.h",
        "scoped_unlock.h",
        "serialization_context.h",
    ],
)

idl_generator(
    name = "fail_point_server_parameter_gen",
    src = "fail_point_server_parameter.idl",
)

mongo_cc_library(
    name = "fail_point",
    srcs = [
        "fail_point.cpp",
        "fail_point_server_parameter_gen",
    ],
    deps = [
        "//src/mongo/bson/util:bson_extract",
        "//src/mongo/db:server_base",
    ],
)

idl_generator(
    name = "testing_options_gen",
    src = "testing_options.idl",
)

mongo_cc_library(
    name = "caching",
    srcs = [
        "read_through_cache.cpp",
    ],
    hdrs = [
        "read_through_cache.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/db:service_context",
        "//src/mongo/util/concurrency:spin_lock",  # TODO(SERVER-93876): Remove.
    ],
)

idl_generator(
    name = "tcmalloc_parameters_gen",
    src = "tcmalloc_parameters.idl",
)

idl_generator(
    name = "password_params_gen",
    src = "password_params.idl",
)

idl_generator(
    name = "pin_code_segments_params_gen",
    src = "pin_code_segments_params.idl",
)

mongo_cc_library(
    name = "boost_assert_shim",
    srcs = [
        "boost_assert_shim.cpp",
    ],
    hdrs = [
        "boost_assert_shim.h",
        "//src/third_party/boost:headers",
    ],
    copts = [
        "-Isrc/third_party/boost",
    ],
)

mongo_cc_library(
    name = "debugger",
    srcs = [
        "debugger.cpp",
    ],
    hdrs = [
        "debugger.h",
    ],
    local_defines = select({
        "//bazel/config:use_gdbserver_enabled": ["USE_GDBSERVER"],
        "//bazel/config:use_lldbserver_enabled": ["USE_LLDB_SERVER"],
        "//bazel/config:use_wait_for_debugger_enabled": ["WAIT_FOR_DEBUGGER"],
        "//conditions:default": [],
    }),
)

mongo_cc_library(
    name = "winutil",
    srcs = [
        "winutil.cpp",
    ],
    hdrs = [
        "winutil.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "secure_compare_memory",
    srcs = [
        "secure_compare_memory.cpp",
    ],
    hdrs = [
        "secure_compare_memory.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "secure_zero_memory",
    srcs = [
        "secure_zero_memory.cpp",
    ],
    hdrs = [
        "secure_zero_memory.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "background_job",
    srcs = [
        "background.cpp",
    ],
    hdrs = [
        "background.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/util/concurrency:spin_lock",
    ],
)

mongo_cc_library(
    name = "clock_sources",
    srcs = [
        "background_thread_clock_source.cpp",
        "clock_source.cpp",
        "fast_clock_source_factory.cpp",
    ],
    hdrs = [
        "background_thread_clock_source.h",
        "clock_source.h",
        "fast_clock_source_factory.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "alarm",
    srcs = [
        "alarm.cpp",
        "alarm_runner_background_thread.cpp",
    ],
    hdrs = [
        "alarm.h",
        "alarm_runner_background_thread.h",
    ],
    deps = [
        ":clock_sources",
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "executor_stats",
    srcs = [
        "executor_stats.cpp",
    ],
    hdrs = [
        "executor_stats.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "field_set",
    srcs = [
        "field_set.cpp",
    ],
    hdrs = [
        "field_set.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "string_listset",
    srcs = [
        "string_listset.cpp",
    ],
    hdrs = [
        "string_listset.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

render_template(
    name = "icu_init_cpp",
    srcs = [
        "generate_icu_init_cpp.py",
    ] + select({
        "@platforms//cpu:s390x": ["//src/third_party/icu4c-57.1/source:mongo_sources/icudt57b.dat"],
        "//conditions:default": ["//src/third_party/icu4c-57.1/source:mongo_sources/icudt57l.dat"],
    }),
    cmd = [
        "$(location generate_icu_init_cpp.py)",
        "-o",
        "$(location icu_init.cpp)",
        "-i",
    ] + select({
        "@platforms//cpu:s390x": ["$(location //src/third_party/icu4c-57.1/source:mongo_sources/icudt57b.dat)"],
        "//conditions:default": ["$(location //src/third_party/icu4c-57.1/source:mongo_sources/icudt57l.dat)"],
    }),
    output = "icu_init.cpp",
)

# When using ICU from third_party, icu_init.cpp will load a subset of
# ICU's data files using udata_setCommonData() in an initializer.
mongo_cc_library(
    name = "icu_init",
    srcs = [
        ":icu_init_cpp",
    ],
    deps = [
        "//src/mongo:base",
        "//src/third_party/icu4c-57.1/source:icu_i18n",
    ],
)

mongo_cc_library(
    name = "icu",
    srcs = [
        "icu.cpp",
        "//src/third_party/node:icu_get_string_width.cpp",
    ],
    hdrs = [
        "icu.h",
    ],
    deps = [
        ":icu_init",
        "//src/mongo:base",
        "//src/third_party/icu4c-57.1/source:icu_i18n",
    ],
)

mongo_cc_library(
    name = "log_and_backoff",
    srcs = [
        "log_and_backoff.cpp",
    ],
    hdrs = [
        "log_and_backoff.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "summation",
    srcs = [
        "summation.cpp",
    ],
    hdrs = [
        "summation.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "progress_meter",
    srcs = [
        "progress_meter.cpp",
    ],
    hdrs = [
        "progress_meter.h",
    ],
    header_deps = [
        "//src/mongo/db/concurrency:flow_control_ticketholder",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "periodic_runner",
    srcs = [
        "periodic_runner.cpp",
    ],
    hdrs = [
        "periodic_runner.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "periodic_runner_impl",
    srcs = [
        "periodic_runner_impl.cpp",
    ],
    hdrs = [
        "periodic_runner_impl.h",
    ],
    deps = [
        ":periodic_runner",  # TODO(SERVER-93876): Remove.
        "//src/mongo:base",
        "//src/mongo/db:service_context",
        "//src/mongo/util/concurrency:spin_lock",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "periodic_runner_factory",
    srcs = [
        "periodic_runner_factory.cpp",
    ],
    hdrs = [
        "periodic_runner_factory.h",
    ],
    deps = [
        ":periodic_runner_impl",
        "//src/mongo:base",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db:service_context",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "safe_num",
    srcs = [
        "safe_num.cpp",
    ],
    hdrs = [
        "safe_num.h",
    ],
    header_deps = [
        "//src/mongo/db/concurrency:flow_control_ticketholder",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "dns_query",
    srcs = [
        "dns_query.cpp",
    ],
    hdrs = [
        "dns_query.h",
    ] + select({
        "@platforms//os:windows": ["dns_query_windows-impl.h"],
        "//bazel/config:posix": ["dns_query_posix-impl.h"],
        "//conditions:default": [],
    }),
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "password",
    srcs = [
        "password.cpp",
        ":password_params_gen",
    ],
    hdrs = [
        "password.h",
    ],
    deps = [
        "//src/mongo/db:server_base",
    ],
)

mongo_cc_library(
    name = "pin_code_segments",
    srcs = [
        "pin_code_segments.cpp",
        ":pin_code_segments_params_gen",
    ],
    target_compatible_with = select({
        "@platforms//os:linux": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        "//src/mongo/db:server_base",
    ],
)

mongo_cc_library(
    name = "system_perf",
    srcs = [
        "sysprofile.cpp",
    ],
    hdrs = [
        "sysprofile.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "testing_options",
    srcs = [
        "testing_options.cpp",
        ":testing_options_gen",
    ],
    deps = [
        "//src/mongo/db:server_base",
    ],
)

mongo_cc_library(
    name = "md5",
    srcs = [
        "md5.cpp",
        "password_digest.cpp",
    ],
    hdrs = [
        "md5.h",
        "password_digest.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/third_party/tomcrypt-1.18.2:tomcrypt_md5",
    ],
)

mongo_cc_library(
    name = "clock_source_mock",
    srcs = [
        "clock_source_mock.cpp",
    ],
    hdrs = [
        "clock_source_mock.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "future_util",
    srcs = [
        "future_util.cpp",
    ],
    hdrs = [
        "future_util.h",
    ],
    deps = [
        "//src/mongo/executor:task_executor_interface",
    ],
)

mongo_cc_library(
    name = "mock_periodic_runner",
    srcs = [
        "mock_periodic_runner.cpp",
    ],
    hdrs = [
        "mock_periodic_runner.h",
        "tick_source_mock.h",
    ],
    deps = [
        "periodic_runner",
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "tracing_support",
    srcs = [
        "tracing_support.cpp",
    ],
    hdrs = [
        "tracing_support.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "elapsed_tracker",
    srcs = [
        "elapsed_tracker.cpp",
    ],
    hdrs = [
        "elapsed_tracker.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/util/net:network",  # this is for using listener to check elapsed time
    ],
)

mongo_cc_library(
    name = "pcre_wrapper",
    srcs = [
        "pcre.cpp",
        "pcre.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/third_party/pcre2",
    ],
)

mongo_cc_library(
    name = "pcre_util",
    srcs = [
        "pcre_util.cpp",
        "pcre_util.h",
    ],
    deps = [
        ":pcre_wrapper",
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "procparser",
    srcs = [
        "procparser.cpp",
        "procparser.h",
    ],
    target_compatible_with = select({
        "@platforms//os:linux": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":pcre_wrapper",
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "processinfo",
    srcs = [
        "processinfo.cpp",
        "processinfo.h",
        "//src/mongo/db:jsobj.h",
    ] + select({
        "@platforms//os:{}".format(os): ["processinfo_{}.cpp".format(os)]
        for os in [
            "freebsd",
            "linux",
            "openbsd",
            "osx",
            "windows",
        ]
    } | {
        "//conditions:default": ["processinfo_unknown.cpp"],
    }),
    deps = [
        ":pcre_wrapper",
        "//src/mongo:base",
    ] + select({
        "@platforms//os:linux": ["procparser"],
        "//conditions:default": [],
    }),
)

mongo_cc_library(
    name = "perfctr_collect",
    srcs = [
        "perfctr_collect.cpp",
    ],
    hdrs = [
        "perfctr_collect.h",
    ],
    target_compatible_with = select({
        "@platforms//os:windows": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "signal_handlers",
    srcs = [
        "signal_handlers.cpp",
    ] + select({
        "@platforms//os:windows": [
            "signal_win32.cpp",
        ],
        "//conditions:default": [],
    }),
    hdrs = [
        "signal_handlers.h",
        "signal_win32.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/db:log_process_details",
        "//src/mongo/db:server_base",
        "//src/mongo/db:service_context",
    ],
)

mongo_cc_library(
    name = "ntservice",
    srcs = [
        "ntservice.cpp",
    ],
    hdrs = [
        "ntservice.h",
    ],
    deps = [
        ":signal_handlers",
        "//src/mongo/util/options_parser",
    ],
)
