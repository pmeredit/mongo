# -*- mode: python -*-

Import(
    [
        "env",
        "get_option",
        "have_sasl_lib",
        "has_option",
        "http_client",
        "version_extra",
        "version_parts",
        "wiredtiger",
    ]
)

env = env.Clone()

# Ideally 's2' would be scoped narrowly but it is spammed in all over the place by
# db/geo unfortunately.
env.InjectThirdParty(
    libraries=[
        "s2",
    ]
)


def shouldBuildGRPC(myEnv):
    return myEnv.TargetOSIs("linux") and myEnv["ENABLE_GRPC_BUILD"]


env.SConscript(
    must_exist=1,
    dirs=[
        "admission",
        "auth",
        "catalog",
        "collection_crud",
        "commands",
        "concurrency",
        "exec",
        "fts",
        "ftdc",
        "geo",
        "process_health",
        "index",
        "matcher",
        "op_observer",
        "pipeline",
        "query",
        "repl",
        "s",
        "session",
        "sorter",
        "stats",
        "storage",
        "timeseries",
        "transaction",
        "ttl",
        "update",
        "views",
    ],
    exports=[
        "env",
    ],
)

env.CppUnitTest(
    target="server_base_test",
    source=[
        "$BUILD_DIR/mongo/util/database_name_util_test.cpp",
        "$BUILD_DIR/mongo/util/namespace_string_util_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/db/server_base",
    ],
)

env.Benchmark(
    target="profile_filter_bm",
    source=[
        "profile_filter_bm.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/db/commands/profile_common",
        "$BUILD_DIR/mongo/util/processinfo",
        "profile_settings",
    ],
    CONSOLIDATED_TARGET="query_bm",
)

env.CppUnitTest(
    target="profile_filter_test",
    source=[
        "profile_filter_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/db/commands/profile_common",
        "$BUILD_DIR/mongo/db/service_context_test_fixture",
    ],
)

env.CppUnitTest(
    target="profile_settings_test",
    source=[
        "profile_settings_test.cpp",
    ],
    LIBDEPS=[
        "profile_settings",
    ],
)

env.Library(
    target="change_stream_pre_image_test_helpers",
    source=[
        "change_stream_pre_image_test_helpers.cpp",
    ],
    LIBDEPS_PRIVATE=[
        "change_stream_pre_image_util",
        "change_stream_pre_images_collection_manager",
        "server_base",
        "shard_role",
    ],
)

env.CppUnitTest(
    target="change_stream_pre_images_manager_test",
    source=[
        "change_stream_pre_images_remover_test.cpp",
        "change_stream_pre_images_tenant_truncate_markers_test.cpp",
        "change_stream_pre_images_truncate_manager_test.cpp",
        "change_stream_pre_images_truncate_markers_per_nsUUID_test.cpp",
    ],
    LIBDEPS=[
        "catalog/catalog_test_fixture",
        "catalog/collection_catalog",
        "change_stream_options",
        "change_stream_options_manager",
        "change_stream_pre_image_test_helpers",
        "change_stream_pre_image_util",
        "change_stream_pre_images_collection_manager",
        "change_stream_serverless_helpers",
        "change_streams_cluster_parameter",
        "collection_crud/collection_crud",
        "op_observer/op_observer",
        "op_observer/op_observer_impl",
        "op_observer/operation_logger_impl",
        "shard_role",
        "storage/record_store_base",
    ],
)

env.Library(
    target="read_write_concern_defaults_mock",
    source=[
        "read_write_concern_defaults_cache_lookup_mock.cpp",
    ],
    LIBDEPS=[
        "read_write_concern_defaults",
    ],
)

env.CppUnitTest(
    target="default_baton_test",
    source=[
        "default_baton_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
        "$BUILD_DIR/mongo/db/service_context_non_d",
        "$BUILD_DIR/mongo/util/clock_source_mock",
        "service_context",
        "service_context_test_fixture",
    ],
    PROVE_ALIASES=["server-programmability"],
)

env.CppUnitTest(
    target="prepare_conflict_tracker_test",
    source=[
        "prepare_conflict_tracker_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/unittest/unittest",
        "prepare_conflict_tracker",
    ],
)

env.CppUnitTest(
    target="client_out_of_line_executor_test",
    source=[
        "client_out_of_line_executor_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/transport/transport_layer_common",
        "client_out_of_line_executor",
        "concurrency/lock_manager",
    ],
    PROVE_ALIASES=["server-programmability"],
)

env.CppUnitTest(
    target="mongod_options_test",
    source=[
        "mongod_options_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/util/options_parser/options_parser",
        "concurrency/lock_manager",
        "mongod_options",
        "server_base",
    ],
    PROVE_ALIASES=["server-programmability"],
)

env.CppUnitTest(
    target="replica_set_endpoint_test",
    source=[
        "direct_shard_client_tracker_test.cpp",
        "replica_set_endpoint_sharding_state_test.cpp",
        "replica_set_endpoint_test_fixture.cpp",
        "replica_set_endpoint_util_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/rpc/message",
        "$BUILD_DIR/mongo/transport/transport_layer_mock",
        "auth/authmocks",
        "commands",
        "commands_test_example",
        "repl/replmocks",
        "s/sharding_catalog_manager",
        "service_context_d_test_fixture",
        "shard_role_api",
    ],
)

env.Library(
    target="fle_mocks",
    source=[
        "fle_query_interface_mock.cpp",
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/crypto/fle_crypto",
        "$BUILD_DIR/mongo/db/query/write_ops/write_ops",
        "$BUILD_DIR/mongo/db/repl/storage_interface_impl",
        "fle_crud",
        "fle_crud_mongod",
    ],
)

env.Library(
    target="vector_clock_trivial",
    source=[
        "vector_clock_trivial.cpp",
    ],
    LIBDEPS=[
        "vector_clock_mutable",
    ],
)

asioEnv = env.Clone()
asioEnv.InjectThirdParty("asio")

env.Program(
    target="mongotrafficreader",
    source=[
        "traffic_reader_main.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
        "$BUILD_DIR/mongo/rpc/message",
        "$BUILD_DIR/mongo/util/signal_handlers",
        "concurrency/lock_manager",
        "traffic_reader",
    ],
)

if env.TargetOSIs("windows"):
    generatedDbManifest = env.Substfile(
        "mongod.manifest.in",
        SUBST_DICT=[
            ("@mongo_version_major@", version_parts[0]),
            ("@mongo_version_minor@", version_parts[1]),
            ("@mongo_version_patch@", version_parts[2]),
            ("@mongo_version_extra@", version_parts[3]),
            ("@mongo_version_extra_str@", version_extra),
        ],
    )

    env.Alias("generated-sources", generatedDbManifest)
    env.Depends("mongod.res", generatedDbManifest)

env.BazelProgram(
    target="mongod",
    source=[],
    LIBDEPS=[],
    AIB_COMPONENT="mongod",
    AIB_COMPONENTS_EXTRA=[
        "core",
        "default",
        "devcore",
        "dist",
        "dist-test",
        "integration-tests",
        "serverless",
        "serverless-test",
        "servers",
    ],
)

env.Library(
    target="op_msg_fuzzer_fixture",
    source=[
        "op_msg_fuzzer_fixture.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/transport/transport_layer_mock",
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/rpc/rpc",
        "$BUILD_DIR/mongo/s/startup_initialization",
        "$BUILD_DIR/mongo/transport/session_manager",
        "$BUILD_DIR/mongo/unittest/unittest",
        "$BUILD_DIR/mongo/util/periodic_runner_factory",
        "auth/auth",
        "auth/authmocks",
        "catalog/catalog_impl",
        "catalog/database_holder",
        "op_observer/op_observer",
        "repl/replmocks",
        "s/sharding_runtime_d",
        "server_base",
        "service_context_d",
        "stats/top",
        "storage/storage_control",
        "storage/storage_options",
        "storage/wiredtiger/storage_wiredtiger",
    ],
)

# TODO(SERVER-45266) This could be part of db_unittest_test but it needs to mutate
# storageGlobalParams.
env.CppUnitTest(
    target="op_msg_fuzzer_fixture_test",
    source=[
        "op_msg_fuzzer_fixture_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/rpc/rpc",
        "op_msg_fuzzer_fixture",
        "server_base",
    ],
)

env.Library(
    target="commands_test_example",
    source=[
        "commands_test_example_gen.cpp",
    ],
    LIBDEPS_PRIVATE=[
        "commands",
        "server_base",
    ],
)

envWithAsio = env.Clone()
envWithAsio.InjectThirdParty(libraries=["asio"])

if wiredtiger:
    envWithAsio.CppUnitTest(
        target="db_base_test",
        source=[
            "error_labels_test.cpp",
            "field_parser_test.cpp",
            "field_ref_set_test.cpp",
            "field_ref_test.cpp",
            "hasher_test.cpp",
            "namespace_string_test.cpp",
            "operation_id_test.cpp",
            "record_id_test.cpp",
            "server_options_test.cpp",
            "shard_id_test.cpp",
            "startup_warnings_mongod_thp_test.cpp",
        ],
        LIBDEPS=[
            "$BUILD_DIR/mongo/util/fail_point",
            "commands",
            "error_labels",
            "mongohasher",
            "pipeline/aggregation_request_helper",
            "pipeline/change_stream_pipeline",
            "record_id_helpers",
            "server_options_base",
            "server_options_servers",
            "service_context_test_fixture",
            "startup_warnings_mongod",
        ],
    )

    envWithAsio.CppUnitTest(
        target="change_collection_test",
        source=[
            "change_collection_expired_change_remover_test.cpp",
        ],
        LIBDEPS=[
            "$BUILD_DIR/mongo/util/clock_source_mock",
            "catalog/catalog_test_fixture",
            "change_collection_expired_change_remover",
            "change_stream_change_collection_manager",
            "change_stream_serverless_helpers",
            "change_streams_cluster_parameter",
            "pipeline/change_stream_expired_pre_image_remover",
            "query_exec",
            "record_id_helpers",
            "repl/read_concern_args",
            "server_base",
            "shard_role",
            "startup_recovery",
        ],
    )

    envWithAsio.CppUnitTest(
        target="command_test",
        source=[
            "bulk_write_shard_test.cpp",
            "commands_test.cpp",
            "curop_test.cpp",
            "curop_stats_test.cpp",
        ],
        LIBDEPS=[
            "$BUILD_DIR/mongo/db/prepare_conflict_tracker",
            "$BUILD_DIR/mongo/db/service_context_d",
            "$BUILD_DIR/mongo/transport/transport_layer_mock",
            "auth/auth",
            "auth/authmocks",
            "catalog/catalog_helpers",
            "commands",
            "commands/query_cmd/bulk_write_command",
            "commands/query_cmd/bulk_write_parser",
            "commands_test_example",
            "query/query_test_service_context",
            "s/shard_server_test_fixture",
            "service_context_test_fixture",
            "shard_role_api",
        ],
    )

    envWithAsio.CppUnitTest(
        target="fle_test",
        source=[
            "fle_crud_test.cpp",
            "query/fle/encrypted_predicate_test_fixtures.cpp",
            "query/fle/equality_predicate_test.cpp",
            "query/fle/implicit_validator_test.cpp",
            "query/fle/query_rewriter_test.cpp",
            "query/fle/range_predicate_test.cpp",
            "query/fle/range_validator_test.cpp",
        ],
        LIBDEPS=[
            "$BUILD_DIR/mongo/crypto/aead_encryption",
            "$BUILD_DIR/mongo/crypto/encrypted_field_config",
            "$BUILD_DIR/mongo/crypto/fle_crypto",
            "$BUILD_DIR/mongo/shell/kms_idl",
            "catalog/collection_options",
            "fle_crud",
            "fle_mocks",
            "query/query_test_service_context",
            "query/write_ops/write_ops",
            "query_expressions",
            "repl/repl_coordinator_interface",
            "repl/replmocks",
            "repl/storage_interface_impl",
            "service_context_d_test_fixture",
            "service_context_test_fixture",
        ],
    )

    envWithAsio.CppUnitTest(
        target="operation_test",
        source=[
            "cancelable_operation_context_test.cpp",
            "client_context_test.cpp",
            "client_strand_test.cpp",
            "dbdirectclient_test.cpp",
            "dbmessage_test.cpp",
            "mirroring_sampler_test.cpp",
            "operation_context_test.cpp",
            "operation_cpu_timer_test.cpp",
            "operation_time_tracker_test.cpp",
            "persistent_task_store_test.cpp",
            "resource_yielder_test.cpp",
            "thread_client_test.cpp",
            "wire_version_test.cpp",
            "service_context_test.cpp",
        ],
        LIBDEPS=[
            "$BUILD_DIR/mongo/transport/transport_layer_mock",
            "$BUILD_DIR/mongo/util/concurrency/thread_pool",
            "catalog/catalog_test_fixture",
            "commands",
            "dbdirectclient",
            "mirror_maestro",
            "operation_time_tracker",
            "repl/replmocks",
            "rw_concern_d",
            "service_context",
            "service_context_d_test_fixture",
            "service_context_test_fixture",
            "shard_role",
            "stats/counters",
        ],
        PROVE_ALIASES=["server-programmability"],
    )

    envWithAsio.CppUnitTest(
        target="query_test",
        source=[
            "collection_index_usage_tracker_test.cpp",
            "keypattern_test.cpp",
            "multi_key_path_tracker_test.cpp",
            "update_index_data_test.cpp",
        ],
        LIBDEPS=[
            "$BUILD_DIR/mongo/client/read_preference",
            "$BUILD_DIR/mongo/util/clock_source_mock",
            "collection_index_usage_tracker",
            "index/index_access_method",
            "query_exec",
            "service_context",
            "service_context_non_d",
            "service_context_test_fixture",
            "update_index_data",
        ],
    )

    envWithAsio.CppUnitTest(
        target="read_write_concern_test",
        source=[
            "read_write_concern_provenance_test.cpp",
            "write_concern_test.cpp",
            "write_concern_options_test.cpp",
        ],
        LIBDEPS=[
            "repl/repl_settings",
            "repl/replmocks",
            "rw_concern_d",
            "service_context_test_fixture",
        ],
    )

    envWithAsio.CppUnitTest(
        target="session_test",
        source=[
            "service_liaison_mock.cpp",
            "session/internal_session_pool_test.cpp",
            "session/internal_transactions_reap_service_test.cpp",
            "session/kill_sessions_local_test.cpp",
            "session/logical_session_cache_test.cpp",
            "session/logical_session_id_test.cpp",
            "session/session_catalog_mongod_test.cpp",
            "session/session_catalog_test.cpp",
        ],
        LIBDEPS=[
            "$BUILD_DIR/mongo/executor/async_timer_mock",
            "$BUILD_DIR/mongo/transport/transport_layer_mock",
            "$BUILD_DIR/mongo/util/clock_source_mock",
            "$BUILD_DIR/mongo/util/periodic_runner_factory",
            "auth/auth",
            "auth/authmocks",
            "dbdirectclient",
            "repl/image_collection_entry",
            "repl/oplog",
            "repl/repl_settings",
            "repl/replica_set_aware_service",
            "repl/replmocks",
            "repl/storage_interface_impl",
            "service_context_d",
            "service_context_d_test_fixture",
            "session/kill_sessions_local",
            "session/logical_session_cache_impl",
            "session/logical_session_id_helpers",
            "session/session_catalog_mongod",
            "session/sessions_collection",
            "session/sessions_collection_mock",
            "shared_request_handling",
            "transaction/transaction",
        ],
    )

    envWithAsio.CppUnitTest(
        target="shard_role_test",
        source=[
            "d_concurrency_test.cpp",
            "database_name_test.cpp",
            "db_raii_multi_collection_test.cpp",
            "db_raii_test.cpp",
            "shard_role_test.cpp",
            "catalog_raii_test.cpp",
        ],
        LIBDEPS=[
            "$BUILD_DIR/mongo/db/catalog/catalog_control",
            "$BUILD_DIR/mongo/db/query/client_cursor/client_cursor",
            "$BUILD_DIR/mongo/util/concurrency/ticketholder",
            "$BUILD_DIR/mongo/util/progress_meter",
            "admission/ticketholder_manager",
            "catalog/catalog_test_fixture",
            "catalog/collection_uuid_mismatch_info",
            "catalog/database_holder",
            "collection_crud/collection_crud",
            "concurrency/exception_util",
            "query_exec",
            "s/shard_server_test_fixture",
            "s/sharding_runtime_d",
            "shard_role",
        ],
    )

    envWithAsio.CppUnitTest(
        target="vector_clock_test",
        source=[
            "keys_collection_document_test.cpp",
            "logical_time_test.cpp",
            "read_write_concern_defaults_test.cpp",
            "time_proof_service_test.cpp",
            "vector_clock_mongod_test.cpp",
            "vector_clock_test.cpp",
            "vector_clock_test_fixture.cpp",
        ],
        LIBDEPS=[
            "$BUILD_DIR/mongo/util/clock_source_mock",
            "keys_collection_client_direct",
            "keys_collection_document",
            "op_observer/op_observer",
            "op_observer/op_observer_impl",
            "op_observer/operation_logger_impl",
            "read_write_concern_defaults_mock",
            "s/shard_server_test_fixture",
            "signed_logical_time",
            "vector_clock",
            "vector_clock_mutable",
        ],
    )

# These unit tests rely on the config_server_test_fixture, which
# globally alters the state of the system to be in config server
# mode. The other tests are not compatible with that setting.
envWithAsio.CppUnitTest(
    target="db_unittest_with_config_server_test_fixture_test",
    source=[
        "key_generator_update_test.cpp",
        "keys_collection_cache_test.cpp",
        "keys_collection_manager_sharding_test.cpp",
        "logical_time_validator_test.cpp",
    ],
    LIBDEPS=[
        "auth/authmocks",
        "keys_collection_client_direct",
        "s/config_server_test_fixture",
        "vector_clock",
    ],
)

asioEnv.CppIntegrationTest(
    target="db_integration_test",
    source=[
        "nesting_depth_test.cpp",
        "$BUILD_DIR/mongo/db/query/client_cursor/exhaust_cursor_currentop_integration_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/client/clientdriver_network",
        "$BUILD_DIR/mongo/executor/network_interface_fixture",
        "$BUILD_DIR/mongo/rpc/message",
        "$BUILD_DIR/mongo/transport/transport_layer_egress_init",
        "$BUILD_DIR/mongo/util/version_impl",
    ],
)

env.CppLibfuzzerTest(
    target="op_msg_fuzzer",
    source=[
        "op_msg_fuzzer.cpp",
    ],
    LIBDEPS=[
        "op_msg_fuzzer_fixture",
        "server_base",
    ],
)

env.Benchmark(
    target="commands_bm",
    source=[
        "commands_bm.cpp",
    ],
    LIBDEPS=[
        "server_base",
    ],
    CONSOLIDATED_TARGET="first_half_bm",
)

env.Benchmark(
    target="operation_cpu_timer_bm",
    source=[
        "operation_cpu_timer_bm.cpp",
    ],
    LIBDEPS=[
        "service_context_non_d",
        "shard_role_api",
    ],
)

env.Benchmark(
    target="d_concurrency_bm",
    source=[
        "d_concurrency_bm.cpp",
    ],
    LIBDEPS=[
        "service_context_non_d",
        "shard_role_api",
    ],
)

env.CppUnitTest(
    target="service_entry_point_shard_role_test",
    source=[
        "service_entry_point_shard_role_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/transport/service_entry_point_test_fixture",
        "service_context_d",
    ],
    PROVE_ALIASES=["server-programmability"],
)

env.Benchmark(
    target="service_entry_point_shard_role_bm",
    source=[
        "service_entry_point_shard_role_bm.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/db/index_builds/index_builds_coordinator_mongod",
        "$BUILD_DIR/mongo/util/periodic_runner_factory",
        "auth/authserver",
        "catalog/catalog_impl",
        "commands/standalone",
        "dbdirectclient",
        "mongod_options_init",
        "op_observer/op_observer",
        "read_write_concern_defaults_mock",
        "repl/replmocks",
        "repl/storage_interface_impl",
        "s/sharding_runtime_d",
        "server_base",
        "service_context_d",
        "storage/storage_control",
        "storage/wiredtiger/storage_wiredtiger",
        "vector_clock_mongod",
    ],
)

env.Benchmark(
    target="namespace_string_bm",
    source=[
        "namespace_string_bm.cpp",
    ],
    LIBDEPS=[
        "server_base",
    ],
)

env.Benchmark(
    target="collection_acquisition_bm",
    source=[
        "collection_acquisition_bm.cpp",
    ],
    LIBDEPS=[
        "repl/replmocks",
        "service_context_d_test_fixture",
        "shard_role",
        "shard_role_api",
    ],
)

env.CppUnitTest(
    target="server_lifecycle_monitor_test",
    source=[
        "server_lifecycle_monitor_test.cpp",
    ],
    LIBDEPS=[
        "server_lifecycle_monitor",
    ],
)
