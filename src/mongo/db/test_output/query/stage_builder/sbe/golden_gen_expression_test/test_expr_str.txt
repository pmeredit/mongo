# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionConcat

    let [
        l4.0 = getField(s1, "pattern") 
    ] 
    in 
        if (typeMatch(l4.0, 1088) ?: true) 
        then null 
        else 
            if isString(l4.0) 
            then concat("This is", " a ", move(l4.0)) 
            else fail(7158201, "$concat supports only strings") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionReplaceOne

    let [
        l11.0 = getField(s1, "str") 
    ] 
    in 
        let [
            l12.0 = (typeMatch(l11.0, 1088) ?: true) 
        ] 
        in 
            if (l12.0 || isString(l11.0)) 
            then 
                if move(l12.0) 
                then null 
                else replaceOne(move(l11.0), "test", "nice place") 
            
            else fail(7158302, "$replaceOne requires that 'input' be a string") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionSplit

    let [
        l15.0 = getField(s1, "str") 
    ] 
    in 
        if (typeMatch(l15.0, 1088) ?: true) 
        then null 
        else 
            if isString(l15.0) 
            then 
                if (l15.0 == "") 
                then [""] 
                else split(move(l15.0), " ") 
            
            else fail(7158202, "$split string expression must be a string") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionStrcasecmp
(toUpper(coerceToString("this IS a TEST.")) <=> 
    let [
        l18.0 = getField(s1, "str") 
    ] 
    in 
        if (typeMatch(l18.0, 1088) ?: true) 
        then "" 
        else 
            if typeMatch(l18.0, 999942) 
            then toUpper(coerceToString(move(l18.0))) 
            else fail(7158200, "$toUpper input type is not supported") 
) 
# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionSubstrBytes

    let [
        l22.0 = getField(s1, "str") 
    ] 
    in substrBytes(
        if (typeMatch(l22.0, 1088) ?: true) 
        then "" 
        else 
            if (coerceToString(l22.0) ?: true) 
            then fail(5155608, "$substrBytes: string expression could not be resolved to a string") 
            else coerceToString(move(l22.0)) 
   , 10ll, 4ll) 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionSubstrCP

    let [
        l26.0 = getField(s1, "str") 
    ] 
    in substrCP(
        if (typeMatch(l26.0, 1088) ?: true) 
        then "" 
        else 
            if (coerceToString(l26.0) ?: true) 
            then fail(5155708, "$substrCP: string expression could not be resolved to a string") 
            else coerceToString(move(l26.0)) 
   , 10, 4) 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionStrLenBytes

    let [
        l28.0 = getField(s1, "str") 
    ] 
    in 
        if (isString(l28.0) ?: false) 
        then strLenBytes(move(l28.0)) 
        else fail(5155800, "$strLenBytes requires a string argument") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionStrLenCP

    let [
        l30.0 = getField(s1, "str") 
    ] 
    in 
        if (isString(l30.0) ?: false) 
        then strLenCP(move(l30.0)) 
        else fail(5155900, "$strLenCP requires a string argument") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionToLower

    let [
        l32.0 = getField(s1, "str") 
    ] 
    in 
        if (typeMatch(l32.0, 1088) ?: true) 
        then "" 
        else 
            if typeMatch(l32.0, 999942) 
            then toLower(coerceToString(move(l32.0))) 
            else fail(7158200, "$toLower input type is not supported") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionToUpper

    let [
        l34.0 = getField(s1, "str") 
    ] 
    in 
        if (typeMatch(l34.0, 1088) ?: true) 
        then "" 
        else 
            if typeMatch(l34.0, 999942) 
            then toUpper(coerceToString(move(l34.0))) 
            else fail(7158200, "$toUpper input type is not supported") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionTrim

    let [
        l37.0 = getField(s1, "str") 
    ] 
    in 
        if (typeMatch(l37.0, 1088) ?: true) 
        then null 
        else 
            if isString(l37.0) 
            then trim(move(l37.0), ".") 
            else fail(5156302, "$trim input expression must be a string") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionIndexOfBytes

    let [
        l41.0 = getField(s1, "str") 
    ] 
    in 
        if (typeMatch(l41.0, 1088) ?: true) 
        then null 
        else 
            if isString(l41.0) 
            then indexOfBytes(move(l41.0), "is", 
                if (!(isNaN(0ll)) && false) 
                then fail(7158004, "$indexOfBytes start index must be positive") 
                else 0ll 
           ) 
            else fail(7158007, "$indexOfBytes string must resolve to a string or null") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionIndexOfCP

    let [
        l45.0 = getField(s1, "str") 
    ] 
    in 
        if (typeMatch(l45.0, 1088) ?: true) 
        then null 
        else 
            if isString(l45.0) 
            then indexOfCP(move(l45.0), "is", 
                if (!(isNaN(4)) && false) 
                then fail(7158004, "$indexOfCP start index must be positive") 
                else 4ll 
           ) 
            else fail(7158007, "$indexOfCP string must resolve to a string or null") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionIndexOfCP

    let [
        l50.0 = getField(s1, "str") 
    ] 
    in 
        if (typeMatch(l50.0, 1088) ?: true) 
        then null 
        else 
            if isString(l50.0) 
            then indexOfCP(move(l50.0), " ", 
                if (!(isNaN(1)) && false) 
                then fail(7158004, "$indexOfCP start index must be positive") 
                else 1ll 
           , 
                if (!(isNaN(3)) && false) 
                then fail(7158006, "$indexOfCP end index must be positive") 
                else 3ll 
           ) 
            else fail(7158007, "$indexOfCP string must resolve to a string or null") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionRegexFind

    let [
        l54.0 = getField(s1, "str") 
    ] 
    in 
        if (typeMatch(l54.0, 1088) ?: true) 
        then null 
        else 
            if isString(l54.0) 
            then 
                let [
                    l55.0 = regexFind(PcreRegex(/test/), move(l54.0)) 
                ] 
                in 
                    if exists(l55.0) 
                    then makeOwn(move(l55.0)) 
                    else fail(5073403, "$regexFind: error occurred while executing the regular expression") 
            
            else fail(5073401, "$regexFind: input must be of type string") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionRegexFindAll

    let [
        l59.0 = getField(s1, "str") 
    ] 
    in 
        let [
            l60.0 = getField(s1, "pattern") 
        ] 
        in 
            if (typeMatch(l59.0, 1088) ?: true) 
            then [] 
            else 
                if isString(l59.0) 
                then 
                    if isNull(l60.0) 
                    then [] 
                    else 
                        let [
                            l61.0 = regexFindAll(regexCompile(
                                if isString(l60.0) 
                                then 
                                    if hasNullBytes(l60.0) 
                                    then fail(5126602, "$regexFindAll: regex pattern must not have embedded null bytes") 
                                    else l60.0 
                                
                                else 
                                    if typeMatch(l60.0, 2048) 
                                    then getRegexPattern(l60.0) 
                                    else fail(5126601, "$regexFindAll: regex pattern must have either string or BSON RegEx type") 
                           , 
                                if typeMatch(l60.0, 2048) 
                                then getRegexFlags(l60.0) 
                                else "" 
                           ), move(l59.0)) 
                        ] 
                        in 
                            if exists(l61.0) 
                            then makeOwn(move(l61.0)) 
                            else fail(5073403, "$regexFindAll: error occurred while executing the regular expression") 
                
                else fail(5073401, "$regexFindAll: input must be of type string") 

# Golden test output of GoldenGenExpressionTest/TestExprStr
ExpressionRegexMatch

    let [
        l65.0 = getField(s1, "str") 
    ] 
    in 
        if (typeMatch(l65.0, 1088) ?: true) 
        then false 
        else 
            if isString(l65.0) 
            then 
                let [
                    l66.0 = regexMatch(PcreRegex(/test/), move(l65.0)) 
                ] 
                in 
                    if exists(l66.0) 
                    then makeOwn(move(l66.0)) 
                    else fail(5073403, "$regexMatch: error occurred while executing the regular expression") 
            
            else fail(5073401, "$regexMatch: input must be of type string") 

