/**
 *    Copyright (C) 2015 10gen Inc.
 *
 *    This program is free software: you can redistribute it and/or  modify
 *    it under the terms of the GNU Affero General Public License, version 3,
 *    as published by the Free Software Foundation.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the GNU Affero General Public License in all respects
 *    for all of the code used other than as permitted herein. If you modify
 *    file(s) with this exception, you may extend this exception to your
 *    version of the file(s), but you are not obligated to do so. If you do not
 *    wish to do so, delete this exception statement from your version. If you
 *    delete this exception statement from all source files in the program,
 *    then also delete it in the license file.
 */

#include <openssl/evp.h>

#include "symmetric_crypto.h"
#include "symmetric_key.h"
#include "mongo/unittest/death_test.h"
#include "mongo/unittest/unittest.h"

namespace mongo {
namespace {

// make space for a padding block
const size_t maxPTSize = (4 + 1) * crypto::aesBlockSize;

// AES CBC mode test vectors from NIST sp800-38a
// AES GCM mode test vectors from
// http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-revised-spec.pdf
const struct {
    size_t keySize;
    crypto::aesMode mode;
    size_t ptLen;
    uint8_t key[maxPTSize];
    uint8_t iv[maxPTSize];
    uint8_t pt[maxPTSize];
    uint8_t ct[maxPTSize];
    uint8_t tag[maxPTSize];
}

// FIXME: GCM tests disabled due to test failures on Ubuntu 1204
// clang-format off
aesTests[] = {
    // AES-128 GCM
    // Tests tag of zeroed key and empty plaintext
/*  {crypto::sym128KeySize,
     crypto::aesMode::gcm,
     0,
     {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
     {},
     {},
     {},
     {0x58, 0xe2, 0xfc, 0xce, 0xfa, 0x7e, 0x30, 0x61,
      0x36, 0x7f, 0x1d, 0x57, 0xa4, 0xe7, 0x45, 0x5a}},

    // AES-128 GCM
    {crypto::sym128KeySize,
     crypto::aesMode::gcm,
     64,
     {0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
      0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08},
     {0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
      0xde, 0xca, 0xf8, 0x88},
     {0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
      0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
      0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
      0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
      0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
      0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25 ,
      0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
      0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55},
     {0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
      0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
      0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
      0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
      0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
      0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
      0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
      0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85},
     {0x4d, 0x5c, 0x2a, 0xf3, 0x27, 0xcd, 0x64, 0xa6,
      0x2c, 0xf3, 0x5a, 0xbd, 0x2b, 0xa6, 0xfa, 0xb4}
    },

    // AES-256 GCM
    {crypto::sym256KeySize,
     crypto::aesMode::gcm,
     64,
     {0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
      0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
      0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
      0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08},
     {0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
      0xde, 0xca, 0xf8, 0x88},
     {0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
      0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
      0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
      0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
      0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
      0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
      0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
      0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55},
     {0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
      0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
      0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
      0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
      0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
      0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
      0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
      0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad},
     {0xb0, 0x94, 0xda, 0xc5, 0xd9, 0x34, 0x71, 0xbd,
      0xec, 0x1a, 0x50, 0x22, 0x70, 0xe3, 0xcc, 0x6c}
    },*/

    // AES-128 CBC
    {crypto::sym128KeySize,
     crypto::aesMode::cbc,
     4 * crypto::aesBlockSize,
     {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
      0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c},
     {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
     {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
      0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
      0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
      0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
      0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
      0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
      0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
      0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10},
     {0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46,
      0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
      0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee,
      0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
      0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b,
      0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
      0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09,
      0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7},
     {}
    },

    // AES-256 CBC
    {crypto::sym256KeySize,
     crypto::aesMode::cbc,
     4 * crypto::aesBlockSize,
     {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
      0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
      0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4},
     {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
      0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
     {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
      0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
      0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
      0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
      0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
      0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
      0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
      0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10},
     {0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba,
      0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6,
      0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d,
      0x67, 0x9f, 0x77, 0x7b, 0xc6, 0x70, 0x2c, 0x7d,
      0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf,
      0xa5, 0x30, 0xe2, 0x63, 0x04, 0x23, 0x14, 0x61,
      0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc,
      0xda, 0x6c, 0x19, 0x07, 0x8c, 0x6a, 0x9d, 0x1b},
     {}
    }
};
//clang-format on

size_t numTests = sizeof(aesTests) / sizeof(aesTests[0]);
const size_t outputBufferSize = 3 * crypto::aesBlockSize + maxPTSize;

TEST(AES, CryptoVectors) {
    for (size_t i = 0; i < numTests; i++) {
        uint8_t pt[maxPTSize];
        uint8_t outputBuffer[outputBufferSize];

        SymmetricKey key(aesTests[i].key, aesTests[i].keySize, crypto::aesAlgorithm);
        crypto::EncryptedMemoryLayout layout(aesTests[i].mode, outputBuffer, outputBufferSize);
        memcpy(layout.getIV(), aesTests[i].iv, sizeof(aesTests[i].iv));

        Status ret =
            crypto::aesEncrypt(aesTests[i].pt, aesTests[i].ptLen, &layout, key, aesTests[i].mode);
#ifndef EVP_CTRL_GCM_GET_TAG
        if (aesTests[i].mode == crypto::aesMode::gcm) {
            // The platform does not support this cipher mode, so expect failure
            ASSERT_NOT_OK(ret) << "aesEncrypt succeeded for an unsupported ciphermode";
            continue;
        }
#endif
        ASSERT_OK(ret) << "aesEncrypt failed " << ret;
        if (aesTests[i].mode == crypto::aesMode::gcm) {
            ASSERT_EQ(0, memcmp(layout.getTag(), aesTests[i].tag, 12)) << "GCM tag mismatch";
        }

        // Check that the ciphertext matches the stored result in both length and content
        size_t expectedSize;
        if (aesTests[i].mode == crypto::aesMode::cbc) {
            expectedSize = aesTests[i].ptLen + crypto::aesBlockSize;
        } else {
            expectedSize = aesTests[i].ptLen;
        }
        ASSERT_EQ(expectedSize, layout.getDataSize());
        ASSERT_EQ(0, memcmp(aesTests[i].ct, layout.getData(), aesTests[i].ptLen));

        size_t ptLen = maxPTSize;
        ret = crypto::aesDecrypt(&layout, key, aesTests[i].mode, pt, &ptLen);

        ASSERT_OK(ret) << "aesDecrypt failed " << ret;

        ASSERT(ptLen == aesTests[i].ptLen && 0 == memcmp(aesTests[i].pt, pt, aesTests[i].ptLen))
            << "AES decrypt mismatch in iteration " << i;

        // Check that GCM ciphers are validating their tags correctly
        if (aesTests[i].mode == crypto::aesMode::gcm) {
            // Corrupt the MAC
            layout.getTag()[0] ^= 0xFF;

            ASSERT_NOT_OK(crypto::aesDecrypt(&layout, key, aesTests[i].mode, pt, &ptLen));
        }
    }
}


TEST(EncryptedMemoryLayout, CanCreateMemoryLayoutWithCBC) {
    uint8_t outputBuffer[outputBufferSize];
    crypto::EncryptedMemoryLayout layout(crypto::aesMode::cbc, outputBuffer, outputBufferSize);
}

TEST(EncryptedMemoryLayout, CanCreateMemoryLayoutWithGCM) {
    uint8_t outputBuffer[outputBufferSize];
    crypto::EncryptedMemoryLayout layout(crypto::aesMode::gcm, outputBuffer, outputBufferSize);
}

DEATH_TEST(EncryptedMemoryLayout, CannotCreateMemoryLayoutWithInvalid, "Fatal Assertion 4052") {
    uint8_t outputBuffer[outputBufferSize];
    // Note that this type of cast should never be performed normally
    crypto::EncryptedMemoryLayout layout((crypto::aesMode)(255), outputBuffer, outputBufferSize);
}

DEATH_TEST(EncryptedMemoryLayout, CannotCreateMemoryLayoutOnNullptr, "invariant") {
    crypto::EncryptedMemoryLayout layout(crypto::aesMode::gcm, nullptr, outputBufferSize);
}

TEST(EncryptedMemoryLayout, CiphertexLen) {
    uint8_t outputBuffer[outputBufferSize];

    // Test CBC
    size_t expected = 16;
    crypto::EncryptedMemoryLayout layoutCBC(crypto::aesMode::cbc, outputBuffer, outputBufferSize);
    ASSERT_EQ(expected, layoutCBC.expectedCiphertextLen(10));

    //Test GCM
    expected = 10;
    crypto::EncryptedMemoryLayout layoutGCM(crypto::aesMode::gcm, outputBuffer, outputBufferSize);
    ASSERT_EQ(expected, layoutGCM.expectedCiphertextLen(10));
}

TEST(EncryptedMemoryLayout, CanFitPlaintText) {
    uint8_t outputBuffer[outputBufferSize];

    // Test CBC
    crypto::EncryptedMemoryLayout layoutCBC(crypto::aesMode::cbc, outputBuffer, outputBufferSize);
    ASSERT_TRUE(layoutCBC.canFitPlaintext(outputBufferSize - 32));
    ASSERT_FALSE(layoutCBC.canFitPlaintext(outputBufferSize - 15));

    // Test GCM
    crypto::EncryptedMemoryLayout layoutGCM(crypto::aesMode::gcm, outputBuffer, outputBufferSize);
    ASSERT_TRUE(layoutGCM.canFitPlaintext(outputBufferSize - 24));
    ASSERT_FALSE(layoutGCM.canFitPlaintext(outputBufferSize - 23));
}

TEST(EncryptedMemoryLayout, SetData) {
    uint8_t outputBuffer[outputBufferSize];

    // Test CBC
    crypto::EncryptedMemoryLayout layoutCBC(crypto::aesMode::cbc, outputBuffer, outputBufferSize);
    layoutCBC.setDataSize(outputBufferSize - layoutCBC.getHeaderSize());
    ASSERT_EQ(outputBufferSize - layoutCBC.getHeaderSize(), layoutCBC.getDataSize());

    // Test GCM
    crypto::EncryptedMemoryLayout layoutGCM(crypto::aesMode::gcm, outputBuffer, outputBufferSize);
    layoutGCM.setDataSize(outputBufferSize - layoutGCM.getHeaderSize());
    ASSERT_EQ(outputBufferSize - layoutGCM.getHeaderSize(), layoutGCM.getDataSize());
}

DEATH_TEST(EncryptedMemoryLayout, GCMSetDataTooBig, "invariant") {
    uint8_t outputBuffer[outputBufferSize];
    crypto::EncryptedMemoryLayout layout(crypto::aesMode::gcm, outputBuffer, outputBufferSize);
    layout.setDataSize(outputBufferSize - layout.getHeaderSize() + 1);
}

DEATH_TEST(EncryptedMemoryLayout, CBCSetDataTooBig, "invariant") {
    uint8_t outputBuffer[outputBufferSize];
    crypto::EncryptedMemoryLayout layout(crypto::aesMode::cbc, outputBuffer, outputBufferSize);
    layout.setDataSize(outputBufferSize - layout.getHeaderSize() + 1);
}

TEST(EncryptedMemoryLayout, PlaintextLen) {
    uint8_t outputBuffer[outputBufferSize];

    // Test CBC
    crypto::EncryptedMemoryLayout layoutCBC(crypto::aesMode::cbc, outputBuffer, outputBufferSize);
    layoutCBC.setDataSize(16);
    std::pair<size_t, size_t> expected{0, 16};
    ASSERT_TRUE(expected == layoutCBC.expectedPlaintextLen());

    // Test GCM
    crypto::EncryptedMemoryLayout layoutGCM(crypto::aesMode::gcm, outputBuffer, outputBufferSize);
    layoutGCM.setDataSize(10);
    expected = {10, 10};
    ASSERT_TRUE(expected == layoutGCM.expectedPlaintextLen());
}

}  // namespace
}  // namespace mongo
