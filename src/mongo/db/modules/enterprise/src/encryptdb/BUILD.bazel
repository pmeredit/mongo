load("//bazel:mongo_src_rules.bzl", "idl_generator", "mongo_cc_library", "mongo_cc_unit_test")

package(default_visibility = ["//src/mongo/db/modules/enterprise:__subpackages__"])

exports_files(
    glob([
        "*.h",
        "*.cpp",
    ]),
)

idl_generator(
    name = "encryption_options_gen",
    src = "encryption_options.idl",
)

idl_generator(
    name = "keystore_metadata_gen",
    src = "keystore_metadata.idl",
    deps = [
        "//src/mongo/db:basic_types_gen",
    ],
)

idl_generator(
    name = "encryption_key_manager_gen",
    src = "encryption_key_manager.idl",
)

idl_generator(
    name = "log_redact_options_gen",
    src = "log_redact_options.idl",
)

idl_generator(
    name = "decrypt_tool_options_gen",
    src = "decrypt_tool_options.idl",
)

mongo_cc_library(
    name = "log_redact_options",
    srcs = [
        "log_redact_options.cpp",
        "log_redact_options_gen",
    ],
    hdrs = [
        "log_redact_options.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/mongo/db:server_base",
        "//src/mongo/util/options_parser",
    ],
)

mongo_cc_library(
    name = "key_acquisition",
    srcs = [
        "encryption_key_acquisition.cpp",
    ],
    hdrs = [
        "encryption_key_acquisition.h",
    ],
    deps = [
        "//src/mongo/db/auth:security_file",
        "//src/mongo/db/modules/enterprise:kmip",
    ],
)

mongo_cc_library(
    name = "keystore_metadata",
    srcs = [
        "keystore_metadata.cpp",
        "keystore_metadata_gen",
    ],
    hdrs = [
        "keystore_metadata.h",
    ],
    deps = [
        "//src/mongo/crypto:symmetric_crypto",
        "//src/mongo/db:server_base",
        "//src/mongo/db:service_context",
        "//src/mongo/db/modules/enterprise:symmetric_crypto_enterprise",
        "//src/mongo/db/storage:storage_engine_metadata",
    ],
)

mongo_cc_library(
    name = "encryption_key_manager_aux",
    srcs = [
        "encryption_key_manager_init.cpp",
        "encryption_server_status.cpp",
    ],
    local_defines = select({
        "@platforms//os:macos": ["DISABLE_GCM_TESTVECTORS"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        "encryptdb",
        "//src/mongo/db:shard_role_api",
        "//src/mongo/db/commands:server_status_core",
        "//src/mongo/db/modules/enterprise:symmetric_crypto_enterprise",
    ],
)

mongo_cc_library(
    name = "encryptdb",
    srcs = [
        "encrypted_data_protector.cpp",
        "encryption_key_manager.cpp",
        "encryption_key_manager_gen",
        "keystore.cpp",
        "keystore_data_store.cpp",
        "wiredtiger_encryption_callbacks.cpp",
    ],
    hdrs = [
        "encrypted_data_protector.h",
        "encryption_key_manager.h",
        "keystore.h",
        "keystore_data_store.h",
    ],
    local_defines = select({
        "@platforms//os:macos": ["DISABLE_GCM_TESTVECTORS"],
        "//conditions:default": [],
    }),
    target_compatible_with = select({
        "//bazel/config:use_wiredtiger_enabled": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        "key_acquisition",
        "keystore_metadata",
        "//src/mongo/crypto:symmetric_crypto",
        "//src/mongo/db:server_base",
        "//src/mongo/db/catalog:catalog_impl",
        "//src/mongo/db/modules/enterprise:symmetric_crypto_enterprise",
        "//src/mongo/db/storage:encryption_hooks",
        "//src/mongo/db/storage:storage_options",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger_core",
        "//src/third_party/wiredtiger",
    ],
)

mongo_cc_unit_test(
    name = "enterprise_encryptdb_test",
    srcs = [
        "encryption_key_manager_noop.h",
        "encryption_layout_test.cpp",
        "keystore_metadata_test.cpp",
        "keystore_test.cpp",
        "remove_saver_test.cpp",
    ],
    local_defines = select({
        "@platforms//os:macos": ["DISABLE_GCM_TESTVECTORS"],
        "//conditions:default": [],
    }),
    tags = ["mongo_unittest_third_group"],
    deps = [
        ":encryptdb",
        ":keystore_metadata",
        "//src/mongo/db:server_base",
        "//src/mongo/db:service_context_test_fixture",
        "//src/mongo/db/auth:authmocks",
        "//src/mongo/db/modules/enterprise:kmip",
        "//src/mongo/db/modules/enterprise:kmip_configuration",
        "//src/mongo/db/modules/enterprise:symmetric_crypto_enterprise",
        "//src/mongo/db/storage:remove_saver",
        "//src/mongo/db/storage:storage_options",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger_core",
        "//src/mongo/rpc",
        "//src/mongo/util/net:network",
    ],
)

mongo_cc_unit_test(
    name = "enterprise_encryptdb_noubsan_test",
    srcs = [
        "encryption_key_manager_noop.h",
        "wiredtiger_encryption_test.cpp",
    ],
    local_defines = select({
        "@platforms//os:macos": ["DISABLE_GCM_TESTVECTORS"],
        "//conditions:default": [],
    }),
    tags = ["mongo_unittest_third_group"],
    target_compatible_with = select({
        "//bazel/config:ubsan_enabled": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    deps = [
        ":encryptdb",
        "//src/mongo/db:service_context_d_test_fixture",
        "//src/mongo/db:shard_role_api",
        "//src/mongo/db/auth:authmocks",
        "//src/mongo/db/auth:security_file",
        "//src/mongo/db/modules/enterprise:symmetric_crypto_enterprise",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger_core",
        "//src/mongo/util/net:network",
    ],
)
