# -*- mode: python -*-

Import('env')

env = env.Clone()

ldapconf = Configure(env)

if env.TargetOSIs('windows'):
    ldapconf.env['MONGO_LDAP_LIB'] = ["Wldap32"]
else:
    have_ldap_h = ldapconf.CheckLibWithHeader(
                "ldap",
                ["ldap.h"], "C",
                "ldap_is_ldap_url(\"ldap://127.0.0.1\");", autoadd=False)

    have_lber_h = ldapconf.CheckLibWithHeader(
                "lber",
                ["lber.h"], "C",
                "ber_free(NULL, 0);", autoadd=False)

    if have_ldap_h:
        ldapconf.env.AppendUnique(MONGO_LDAP_LIB=['ldap'])
    else:
        env.ConfError("Could not find <ldap.h> and ldap library from OpenLDAP, "
                      "required for LDAP authorization in the enterprise build")

    if have_lber_h:
        ldapconf.env.AppendUnique(MONGO_LDAP_LIB=['lber'])
    else:
        env.ConfError("Could not find <lber.h> and lber library from OpenLDAP, "
                      "required for LDAP authorizaton in the enterprise build")

env = ldapconf.Finish()

env.Library(
    target='ldap_parameters',
    source=[
        'ldap_parameters.idl',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/idl/feature_flag',
        '$BUILD_DIR/mongo/idl/server_parameter',
    ],
)

env.Library(
    target='ldap_manager_init',
    source=[
        'ldap_manager_init.cpp'
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/db/service_context',
        'ldap_manager_impl',
        'ldap_parameters',
    ],
    LIBDEPS_DEPENDENTS=[
        '$BUILD_DIR/mongo/db/mongod_initializers',
        '$BUILD_DIR/mongo/s/mongos_initializers',
    ],
    LIBDEPS_TAGS=[
        'lint-allow-nonprivate-on-deps-dependents',
        'lint-allow-bidirectional-edges',
    ],
)

env.Library(
    target='ldap_manager',
    source=[
        'ldap_manager.cpp',
        'ldap_options.idl',
        'ldap_options.cpp',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/base/secure_allocator',
        '$BUILD_DIR/mongo/db/auth/sasl_options',
        '$BUILD_DIR/mongo/db/service_context',
        '$BUILD_DIR/mongo/util/options_parser/options_parser',
        'ldap_query',
    ],
)

env.Library(
    target='ldap_manager_impl',
    source=[
        'ldap_manager_impl.cpp',
        'ldap_runtime_parameters.cpp',
        'ldap_runner_impl.cpp',
        'ldap_runtime_parameters.idl',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/idl/server_parameter',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/db/auth/auth',
        'ldap_connection',
        'ldap_manager',
        'ldap_name_map',
        'ldap_query',
    ],
)

env.Library(
    target='ldap_options_mongod',
    source=[
        'ldap_options_mongod.idl',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/util/options_parser/options_parser',
        'ldap_manager_impl',
    ],
    LIBDEPS_DEPENDENTS=[
        '$BUILD_DIR/mongo/db/mongod_initializers',
    ],
    LIBDEPS_TAGS=[
        'lint-allow-nonprivate-on-deps-dependents',
        'lint-allow-bidirectional-edges',
    ],
)

env.Library(
    target='ldap_query',
    source=[
        'ldap_connection_options.cpp',
        "ldap_host.cpp",
        'ldap_query.cpp',
        'ldap_query_config.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/base/secure_allocator',
        '$BUILD_DIR/mongo/util/net/network',
        '$BUILD_DIR/mongo/util/options_parser/options_parser',
        '$BUILD_DIR/third_party/shim_pcrecpp',
    ],
)

ldap_connection_sources = [
    'connections/ldap_connection_factory.cpp',
    'connections/ldap_connection_helpers.cpp',
    'connections/ldap_connection_reaper.cpp',
    'ldap_resolver_cache.cpp'
]

if env.TargetOSIs('windows'):
    ldap_connection_sources.append('connections/windows_ldap_connection.cpp')
else:
    ldap_connection_sources.append('connections/openldap_connection.cpp')

env.Library(
    target='ldap_connection',
    source=ldap_connection_sources,
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/auth/user_acquisition_stats',
        'ldap_query',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/db/commands/server_status',
        '$BUILD_DIR/mongo/executor/connection_pool_executor',
        '$BUILD_DIR/mongo/util/alarm',
        '$BUILD_DIR/mongo/util/concurrency/thread_pool',
        "$BUILD_DIR/mongo/util/dns_query",
        '$BUILD_DIR/mongo/util/net/network',
        'ldap_manager',
        'ldap_parameters',
    ],
    SYSLIBDEPS=env.get("MONGO_LDAP_LIB", [])
)

env.Library(
    target='mongo_ldap',
    source=[
        'authz_manager_external_state_ldap.cpp',
        'ldap_user_cache_poller.idl',
        'ldap_user_cache_poller.cpp',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/bson/mutable/mutable_bson',
        '$BUILD_DIR/mongo/db/auth/auth',
        '$BUILD_DIR/mongo/db/auth/authmongod',
        '$BUILD_DIR/mongo/idl/server_parameter',
        '$BUILD_DIR/mongo/util/background_job',
        'ldap_manager_impl',
        'ldap_name_map',
        'ldap_query',
    ],
    LIBDEPS_DEPENDENTS=[
        '$BUILD_DIR/mongo/db/mongod_initializers',
    ],
    LIBDEPS_TAGS=[
        'lint-allow-nonprivate-on-deps-dependents',
    ],
)

env.Library(
    target='ldap_name_map',
    source=[
        'name_mapping/internal_to_ldap_user_name_mapper.cpp',
        'name_mapping/rewrite_rule.cpp',
        'name_mapping/ldap_rewrite_rule.cpp',
        'name_mapping/regex_rewrite_rule.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/service_context',
        '$BUILD_DIR/third_party/shim_pcrecpp',
        'ldap_parameters',
        'ldap_query',
    ],
)

env.Library(
    target='ldap_health_observer',
    source=[
        'ldap_health_observer.cpp',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/db/auth/auth',
        '$BUILD_DIR/mongo/db/auth/authmongod',
        '$BUILD_DIR/mongo/db/process_health/fault_manager',
        '$BUILD_DIR/mongo/idl/server_parameter',
        'ldap_connection',
        'ldap_manager',
        'ldap_manager_impl',
        'ldap_query',
    ],
)

env.CppUnitTest(
    target='enterprise_ldap_test',
    source=[
        'ldap_connection_options_test.cpp',
        'ldap_health_observer_test.cpp',
        'ldap_query_test.cpp',
        'name_mapping/rewrite_rule_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/db/auth/auth',
        '$BUILD_DIR/mongo/db/process_health/fault_manager',
        '$BUILD_DIR/mongo/db/service_context',
        '$BUILD_DIR/mongo/executor/task_executor_test_fixture',
        '$BUILD_DIR/mongo/executor/thread_pool_task_executor_test_fixture',
        '$BUILD_DIR/mongo/util/clock_source_mock',
        '../util/core_options_stub',
        'ldap_health_observer',
        'ldap_manager_impl',
        'ldap_name_map',
        'ldap_query',
    ],
)

env.Program(
    target="mongoldap",
    source=[
        "ldap_tool.cpp",
        "ldap_tool_options.cpp",
        'ldap_tool_options.idl',
    ] +  env.WindowsResourceFile("ldap_tool.rc"),
    AIB_COMPONENT="mongoldap",
    AIB_COMPONENTS_EXTRA=[
        "dist",
        "dist-test",
        "tools",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
        "$BUILD_DIR/mongo/base/secure_allocator",
        "$BUILD_DIR/mongo/db/log_process_details",
        "$BUILD_DIR/mongo/util/dns_query",
        '$BUILD_DIR/mongo/util/net/http_client_impl',
        "$BUILD_DIR/mongo/util/options_parser/options_parser_init",
        "$BUILD_DIR/mongo/util/signal_handlers",
        "$BUILD_DIR/mongo/util/version_impl",
        "../util/report_tool",
        "ldap_manager",
        "ldap_manager_impl",
        "ldap_options_mongod",
        "ldap_query",
    ],
)
