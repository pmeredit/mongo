# -*- mode: python; -*-

import SCons

from libdeps_tool import deptype

Import("env")

env = env.Clone()

env.InjectThirdParty(libraries=["asio"])
env.Library(
    target="audit_enterprise",
    source=[
        "audit_commands_gen.cpp",
        "audit_event_type_gen.cpp",
        "audit_log.cpp",
        "audit_manager.cpp",
        "mongo/audit_application_message.cpp",
        "mongo/audit_authentication.cpp",
        "mongo/audit_authz_check.cpp",
        "mongo/audit_cluster_server_parameters.cpp",
        "mongo/audit_config_event.cpp",
        "mongo/audit_indexes_collections_databases.cpp",
        "mongo/audit_logout.cpp",
        "mongo/audit_metadata.cpp",
        "mongo/audit_mongo_event.cpp",
        "mongo/audit_replset.cpp",
        "mongo/audit_role_management.cpp",
        "mongo/audit_rotate_log.cpp",
        "mongo/audit_startup.cpp",
        "mongo/audit_sharding.cpp",
        "mongo/audit_shutdown.cpp",
        "mongo/audit_user_management.cpp",
        "logger/console.cpp",
        "logger/rotatable_file_writer.cpp",
        "ocsf/audit_application_message.cpp",
        "ocsf/audit_authentication.cpp",
        "ocsf/audit_authz_check.cpp",
        "ocsf/audit_cluster_server_parameters.cpp",
        "ocsf/audit_config_event.cpp",
        "ocsf/audit_indexes_collections_databases.cpp",
        "ocsf/audit_logout.cpp",
        "ocsf/audit_metadata.cpp",
        "ocsf/audit_ocsf_event.cpp",
        "ocsf/audit_replset.cpp",
        "ocsf/audit_role_management.cpp",
        "ocsf/audit_rotate_log.cpp",
        "ocsf/audit_startup.cpp",
        "ocsf/audit_sharding.cpp",
        "ocsf/audit_shutdown.cpp",
        "ocsf/audit_user_management.cpp",
        "ocsf/ocsf_audit_events_gen.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/db/audit",
        "$BUILD_DIR/mongo/db/auth/auth",
        "$BUILD_DIR/mongo/db/ops/write_ops_parsers",
        "$BUILD_DIR/mongo/util/net/network",
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/db/auth/authprivilege",
        "$BUILD_DIR/mongo/db/multitenancy",
        "$BUILD_DIR/mongo/db/query_expressions",
        "$BUILD_DIR/mongo/db/repl/repl_coordinator_interface",
        "$BUILD_DIR/mongo/db/repl/repl_settings",
        "$BUILD_DIR/mongo/db/server_base",
        "$BUILD_DIR/mongo/idl/cluster_server_parameter",
        "$BUILD_DIR/mongo/transport/message_compressor",
        "$BUILD_DIR/mongo/transport/transport_layer",
        "$BUILD_DIR/mongo/util/options_parser/options_parser",
        "audit_config",
        "audit_enc_comp_manager",
    ],
    LIBDEPS_DEPENDENTS=[
        "$BUILD_DIR/mongo/db/index_builds_coordinator_mongod",
        "$BUILD_DIR/mongo/db/mongod_main",
        "$BUILD_DIR/mongo/s/mongos_main",
    ],
    LIBDEPS_TAGS=[
        "lint-allow-nonprivate-on-deps-dependents",
        "lint-allow-bidirectional-edges",
    ],
)

env.Library(
    target="audit_enc_comp_manager",
    source=[
        "audit_enc_comp_manager.cpp",
        "audit_file_header.cpp",
        "audit_key_manager_local.cpp",
        "audit_key_manager_kmip.cpp",
        "audit_header_options_gen.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/db/modules/enterprise/src/encryptdb/key_acquisition",
        "../../symmetric_crypto_enterprise",
        "audit_config",
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/db/server_base",
        "$BUILD_DIR/mongo/transport/message_compressor",
    ],
)

env.Program(
    target="mongoauditdecrypt",
    source=[
        "audit_decryptor.cpp",
        "audit_decryptor_options.cpp",
        "audit_decryptor_options_gen.cpp",
    ]
    + env.WindowsResourceFile("decryptor_tool.rc"),
    AIB_COMPONENT="mongoauditdecrypt",
    AIB_COMPONENTS_EXTRA=[
        "dist-test",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/db/concurrency/lock_manager",
        "$BUILD_DIR/mongo/db/log_process_details",
        "$BUILD_DIR/mongo/db/server_base",
        "$BUILD_DIR/mongo/util/options_parser/options_parser_init",
        "$BUILD_DIR/mongo/util/signal_handlers",
        "$BUILD_DIR/mongo/util/version_impl",
        "audit_enc_comp_manager",
    ],
)

env.Library(
    # This can't be included in audit_enterprise directly
    # since we need mongo/s/grid which
    # depends on audit which depends on audit_enterprise.
    # Avoid the dependency cycle by pulling this out separately.
    target="audit_synchronize_job",
    source=[
        "audit_synchronize_job.cpp",
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/db/audit",
        "$BUILD_DIR/mongo/db/commands/mongod_fcv",
        "$BUILD_DIR/mongo/db/server_base",
        "$BUILD_DIR/mongo/db/transaction/transaction_api",
        "$BUILD_DIR/mongo/executor/inline_executor",
        "$BUILD_DIR/mongo/s/sharding_router_api",
        "audit_config",
        "audit_enterprise",
    ],
)

env.Library(
    target="audit_command",
    source=[
        "audit_command.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/db/audit",
        "$BUILD_DIR/mongo/db/auth/auth",
        "$BUILD_DIR/mongo/db/commands",
        "$BUILD_DIR/mongo/db/service_context",
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/db/auth/authprivilege",
    ],
    LIBDEPS_DEPENDENTS=[
        "$BUILD_DIR/mongo/db/commands/mongod",
        "$BUILD_DIR/mongo/s/commands/cluster_commands",
    ],
    LIBDEPS_TAGS=[
        "lint-allow-nonprivate-on-deps-dependents",
    ],
)

# The auditing code needs to be built into the "coredb" library because there is code in there that
# references audit functions.  However, the "coredb" library is also currently shared by server
# programs, such as mongod and mongos, as well as client programs, such as mongodump and
# mongoexport.  For these reasons, we have no choice but to build the audit module into all of
# these, even though it's dead code in the client programs.  To avoid actually allowing the user to
# configure this dead code, we need to separate the option registration into this
# "audit_configuration" library and add it to only mongod and mongos.  Because audit defaults to
# disabled this effectively prevents this code from being run in client programs.
env.Library(
    target="audit_configuration",
    source=[
        "audit_options.cpp",
        "audit_options_gen.cpp",
        "audit_watchdog.cpp",
    ],
    LIBDEPS=[
        "audit_config",
        "audit_enterprise",
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/db/commands/test_commands_enabled",
        "$BUILD_DIR/mongo/db/server_base",
        "$BUILD_DIR/mongo/db/server_feature_flags",
        "$BUILD_DIR/mongo/util/options_parser/options_parser",
        "$BUILD_DIR/mongo/watchdog/watchdog_register",
    ],
    LIBDEPS_DEPENDENTS=[
        "$BUILD_DIR/mongo/db/mongod_initializers",
        "$BUILD_DIR/mongo/s/mongos_initializers",
    ],
    LIBDEPS_TAGS=[
        "lint-allow-nonprivate-on-deps-dependents",
    ],
)

env.Library(
    target="audit_mongod",
    source=[
        "audit_mongod.cpp",
        "audit_op_observer.cpp",
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/db/auth/auth",
        "$BUILD_DIR/mongo/db/auth/authprivilege",
        "$BUILD_DIR/mongo/db/commands",
        "$BUILD_DIR/mongo/db/commands/cluster_server_parameter_commands_invocation",
        "$BUILD_DIR/mongo/db/dbdirectclient",
        "$BUILD_DIR/mongo/db/dbhelpers",
        "$BUILD_DIR/mongo/db/op_observer/op_observer",
        "$BUILD_DIR/mongo/db/repl/replica_set_aware_service",
        "$BUILD_DIR/mongo/db/s/forwardable_operation_metadata",
        "$BUILD_DIR/mongo/db/s/sharding_commands_d",
        "$BUILD_DIR/mongo/db/shard_role",
        "$BUILD_DIR/mongo/s/write_ops/batch_write_types",
        "audit_enc_comp_manager",
        "audit_enterprise",
        "audit_synchronize_job",
    ],
)

env.Library(
    # We need to reverse link audit_mongod_impl into mongod,
    # but audit_op_observer_test needs a forward link into it.
    # Meanwhile, scons doesn't like that.
    # So we use this proxy to link the mongod implementation back.
    target="audit_mongod_proxy",
    source=[
        # macOS will refuse to link this proxy without source files.
        # Windows will "succeed", but produce no output .lib.
        # Work around this by declaring a dummy TU with a symbol.
        "audit_mongod_proxy.cpp",
    ],
    LIBDEPS_PRIVATE=[
        "audit_mongod",
    ],
    LIBDEPS_DEPENDENTS=[
        "$BUILD_DIR/mongo/db/mongod_initializers",
    ],
    LIBDEPS_TAGS=[
        "lint-allow-nonprivate-on-deps-dependents",
    ],
)

env.CppUnitTest(
    target="audit_test",
    source=[
        "audit_op_observer_test.cpp",
        "audit_enc_comp_manager_test.cpp",
        "audit_file_header_test.cpp",
        "audit_key_manager_test.cpp",
        "audit_sequence_id_test.cpp",
        "audit_output_test.cpp",
        "logger/rotatable_file_writer_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/crypto/symmetric_crypto",
        "$BUILD_DIR/mongo/db/auth/authmocks",
        "$BUILD_DIR/mongo/db/auth/authprivilege",
        "$BUILD_DIR/mongo/db/catalog/catalog_helpers",
        "$BUILD_DIR/mongo/db/change_stream_options_manager",
        "$BUILD_DIR/mongo/db/commands/create_command",
        "$BUILD_DIR/mongo/db/modules/enterprise/src/encryptdb/key_acquisition",
        "$BUILD_DIR/mongo/db/repl/oplog",
        "$BUILD_DIR/mongo/db/repl/oplog_interface_local",
        "$BUILD_DIR/mongo/db/repl/replmocks",
        "$BUILD_DIR/mongo/db/repl/storage_interface_impl",
        "$BUILD_DIR/mongo/db/server_base",
        "$BUILD_DIR/mongo/db/service_context_d_test_fixture",
        "$BUILD_DIR/mongo/db/service_context_test_fixture",
        "$BUILD_DIR/mongo/idl/cluster_server_parameter",
        "$BUILD_DIR/mongo/transport/transport_layer_mock",
        "$BUILD_DIR/mongo/util/options_parser/options_parser",
        "$BUILD_DIR/mongo/util/signal_handlers",
        "../../symmetric_crypto_enterprise",
        "audit_config",
        "audit_enc_comp_manager",
        "audit_enterprise",
        "audit_key_manager_mock",
        "audit_mongod",
    ],
)

env.Library(
    target="audit_key_manager_mock",
    source=[
        "audit_key_manager_mock.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
        "$BUILD_DIR/mongo/crypto/symmetric_crypto",
    ],
)

env.Library(
    target="audit_mongos",
    source=[
        "audit_mongos.cpp",
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/db/auth/auth",
        "$BUILD_DIR/mongo/db/auth/authprivilege",
        "$BUILD_DIR/mongo/db/commands",
        "$BUILD_DIR/mongo/db/dbdirectclient",
        "$BUILD_DIR/mongo/idl/cluster_server_parameter_refresher",
        "$BUILD_DIR/mongo/s/grid",
        "audit_config",
        "audit_enterprise",
        "audit_synchronize_job",
    ],
    LIBDEPS_DEPENDENTS=[
        "$BUILD_DIR/mongo/s/commands/cluster_commands",
        "$BUILD_DIR/mongo/s/mongos_initializers",
    ],
    LIBDEPS_TAGS=[
        "lint-allow-nonprivate-on-deps-dependents",
    ],
)

# writes multi-byte sequences to console
# to support manual testing of console stream under Windows
# output should be visually verified under Command Prompt or Power Shell
env.Program(
    target="console_test",
    source=[
        "logger/console_test.cpp",
    ],
    LIBDEPS=[
        "$BUILD_DIR/mongo/base",
        "$BUILD_DIR/mongo/db/audit",
        "$BUILD_DIR/mongo/unittest/unittest_main",
        "audit_enterprise",
    ],
    AIB_COMPONENT="standalone-console-test",
)
