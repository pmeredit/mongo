# Copyright (C) 2022-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/pipeline/aggregation_request_helper.h"

imports:
    - "mongo/db/basic_types.idl"
    - "mongo/db/modules/enterprise/src/streams/exec/common.idl"
    - "mongo/db/modules/enterprise/src/streams/exec/stages.idl"
    - "mongo/db/modules/enterprise/src/streams/exec/exec_internal.idl"
    - "mongo/db/query/cursor_response.idl"

enums:
    StreamStatus:
        description: "Stream status"
        type: string
        values:
            # streamProcessor is starting.
            Starting: "starting"
            # streamProcessor is running.
            Running: "running"
            # streamProcessor has encountered an error and is no longer running.
            Error: "error"
            # streamProcessor is stopping, after which it will be removed from memory.
            Stopping: "stopping"

structs:
    StreamError:
        description: Error code and reason.
        fields:
            code:
                description: Error code.
                type: int
            reason:
                description: Error reason.
                type: string
            retryable:
                description: If this error is retryable
                type: bool

    # This struct is meant for user-facing commands only, and the field names in this struct are
    # based on the product spec.
    VerboseOperatorStats:
        description: Per-operator stats.
        strict: true
        fields:
            name:
                description: Name of the operator.
                type: string
            inputMessageCount:
                description: Total number of input messages read, including messages that were rejected.
                type: safeInt64
            inputMessageSize:
                description: Total number of input bytes read, including docs that were rejected.
                type: safeInt64
            outputMessageCount:
                description: Total number of output messages emitted.
                type: safeInt64
            outputMessageSize:
                description: Total number of output bytes emitted.
                type: safeInt64
            dlqMessageCount:
                description: Total number of input messages that were rejected and sent to the dead letter queue.
                type: safeInt64
            dlqMessageSize:
                description: Total number of bytes sent to the dead letter queue.
                type: safeInt64
            stateSize:
                description: Total state size of the operator.
                type: safeInt64
            maxMemoryUsage:
                description: Max memory usage of the operator thus far.
                type: safeInt64
            executionTime:
                description: Total execution time of the operator (in seconds).
                type: seconds 

    StartStreamProcessorReply:
        description: "Response message for streams_startStreamProcessor command"
        is_command_reply: true
        fields:
            sampleCursorId:
                description: "The sample cursor id if the stream processor was started atomically with a sampling session."
                type: long
                stability: stable
                optional: true

    StopStreamProcessorReply:
        description: "Response message for streams_stopStreamProcessor command"
        is_command_reply: true

    KafkaConsumerPartitionState:
        description: "State of a single partition in the kafka consumer source"
        fields:
            partition:
                description: "Partition ID that this state represents."
                type: safeInt
            currentOffset:
                description: >
                    The offset that the stream processor is currently on for this partition. This is
                    the last offset that was processed by the stream processor plus one.
                type: safeInt64
            checkpointOffset:
                description: >
                    The offset that the stream processor last committed to the kafka broker and checkpoint
                    for this partition.
                type: safeInt64

    GetStatsReply:
        description: "Response message for streams_getStats command"
        is_command_reply: true
        fields:
            name:
                description: Name of the stream processor.
                type: string
            processorId:
                description: "Unique stream processor id."
                type: string
            status:
                description: Status of the stream processor.
                type: StreamStatus
            scaleFactor:
                description: Scaling applies to size fields.
                type: safeInt64
            inputMessageCount:
                description: Total number of input messages read, including docs that were rejected.
                type: safeInt64
            inputMessageSize:
                description: Total number of input bytes read, including messages that were rejected.
                type: safeDouble
            outputMessageCount:
                description: Total number of output messages emitted.
                type: safeInt64
            outputMessageSize:
                description: Total number of output bytes emitted.
                type: safeDouble
            dlqMessageCount:
                description: Total number of messages that were sent to the DLQ
                type: safeInt64
            dlqMessageSize:
                description: Total number of bytes sent to the DLQ
                type: safeInt64
            stateSize:
                description: Number of bytes that the window operators are using to store state.
                type: safeInt64
            operatorStats:
                description: Stats broken down by operator. This is only populated when requesting for stats in verbose mode.
                type: array<VerboseOperatorStats>
                optional: true
            watermark:
                description: watermark timestamp.
                type: date
                optional: true
            kafkaPartitions:
                description: >
                    Only applicable to stream processors using a kafka source. This contains the current state of each
                    partition for the kafka source.
                type: array<KafkaConsumerPartitionState>
                optional: true
            changeStreamState:
                type:
                    variant: [object, timestamp]
                optional: true
                description: >
                    This is last read resume token or startAtOperationTimestamp if we have not read anything if 
                    the source is change stream."

    VerboseStatus:
        description: "Internal details about a stream processor, used for debugging purposes."
        fields:
            stats:
                description: "The stats of the stream processor."
                type: GetStatsReply
            isCheckpointingEnabled:
                description: "True if checkpointing is enabled on this stream processor."
                type: bool
            restoredCheckpoint:
                description: "A description of the checkpoint this stream processor restored from, if one exists."
                type: CheckpointDescription
                optional: true
            lastCommittedCheckpoint:
                description: "A description of the last checkpoint this stream processor committed, if one exists."
                type: CheckpointDescription
                optional: true

    ListStreamProcessorsReplyItem:
        description: "An item in the response message for streams_listStreamProcessors command"
        fields:
            ns:
                description: "Namespace of the stream processor."
                type: namespacestring
            tenantId:
                description: "Tenant id that this stream processor belongs to."
                type: string
                optional: true
            processorId:
                description: "Unique stream processor id."
                type: string
                optional: true
            name:
                description: "Name of the stream processor."
                type: string
            startedAt:
                description: "Time at which the stream processor was started."
                type: date
            status:
                description: "Status of the stream processor"
                type: StreamStatus
            pipeline:
                description: "An unparsed version of the pipeline."
                type: pipeline
            error:
                description: "Error information for a streamProcessor in an 'error' status."
                type: StreamError
                optional: true
            verboseStatus:
                description: "Verbose status of the stream processor. Only returned if verbose: true is passed in the listStreamProcessors request."
                type: VerboseStatus
                optional: true

    ListStreamProcessorsReply:
        description: "Response message for streams_listStreamProcessors command"
        is_command_reply: true
        fields:
            streamProcessors:
                description: "List of stream processors."
                type: array<ListStreamProcessorsReplyItem>

    StartStreamSampleReply:
        description: "Response message for streams_startStreamSample command"
        is_command_reply: true
        fields:
            name:
                description: "Name of the stream processor."
                type: string
            id:
                cpp_name: "cursorId"
                description: "The cursor id of the cursor."
                type: long
                stability: stable

    GetMetricsReply:
        description: "Response message for streams_getMetrics command"
        is_command_reply: true
        fields:
            counters:
                description: "List of Counters."
                type: array<CounterMetricValue>
                optional: true
            gauges:
                description: "List of Gauges."
                type: array<GaugeMetricValue>
                optional: true
            histograms:
                description: "List of Histograms."
                type: array<HistogramMetricValue>
                optional: true

    UpdateFeatureFlagsReply:
        description: "Response message for UpdateFeatureFlagsCommand."
        is_command_reply: true

    GetFeatureFlagsReply:
        description: "Response message for GetFeatureFlagsCommand."
        is_command_reply: true
        fields:
            featureFlags:
                description: "Feature flags bson object."
                type: object  

    MongoDLQOptions:
        description: "Connection information for the dead letter queue."
        fields:
            connectionName:
                description: "Connection name from connection registry."
                type: string
            db:
                description: "Database name."
                type: string
            coll:
                description: "Collection name."
                type: string

    CheckpointStorageOptions:
        description: "Connection information for checkpoint storage."
        fields:
            uri:
                description: "Atlas connection URI."
                type: string
            db:
                description: "Database name."
                type: string
            coll:
                description: "Collection name."
                type: string
            pemFile:
                description: "Path to PEM file for authentication to an Atlas cluster."
                type: string
                optional: true
            caFile:
                description: "Path to CA file for verifying the PEM file above."
                type: string
                optional: true

    LocalDiskStorageOptions:
        description: "Local disk checkpointing storage options. When set, mongostreams expects the streams Agent to upload checkpoint files to cloud storage."
        fields:
            writeDirectory:
                description: "mongostreams will write new checkpoints in this directory."
                type: string
            restoreDirectory:
                description: "If set, mongostreams expects the restore checkpoint files to be downloaded to this directory."
                type: string
                optional: true

    CheckpointOptions:
        description: "Configuration options for checkpointing."
        fields:
            storage:
                type: CheckpointStorageOptions
                description: "If set, checkpointing uses the specified MongoDB cluster."
                optional: true
            localDisk:
                type: LocalDiskStorageOptions
                description: "If set, checkpointing uses local disk and expects the streams Agent to upload checkpoint files to cloud storage."
                optional: true
            debugOnlyIntervalMs:
                description: "Checkpoint interval in milliseconds. Should only be used for debugging or testing. A default interval is chosen based on the pipeline."
                type: safeInt64
                validator: { gte: 0 }
                optional: true

    StartOptions:
        description: "Extra options supplied to a streamProcessor during start."
        fields:
            dlq:
                description: "DLQ connection information."
                type: MongoDLQOptions
                optional: true
            ephemeral:
                description: "If true, the streamProcessor is ephemeral and likely created as part of a process command from the client. A sink is not required in ephemeral pipelines."
                type: bool
                optional: true
            checkpointOptions:
                description: "Checkpoint options. These options are supplied by the service components, they are not exposed to the end customer."
                type: CheckpointOptions
                optional: true
            validateOnly:
                description: If true, the command will parse and set the streamProcessor, but not start it.
                             The command will not output anything to the external connections in the streamProcessor definition.
                type: bool
                default: false
            enableUnnestedWindow:
                description: If true, the new unnested window execution plans are used.
                type: bool
                default: false
            shouldStartSample:
                description: "If true, a sample session is started and the cursor ID is retured in the command response."
                type: bool
                default: false

commands:
    streams_startStreamProcessor:
        description: "Command to start a stream processor"
        cpp_name: StartStreamProcessorCommand
        command_name: streams_startStreamProcessor
        api_version: ""
        namespace: ignored
        reply_type: StartStreamProcessorReply
        access_check:
            none: true
        fields:
            tenantId:
                description: "Tenant id."
                type: string
                optional: true
            name:
                description: "Stream processor name."
                type: string
            processorId:
                description: "Stream processor id."
                type: string
                optional: true
            pipeline:
                description: "An unparsed version of the pipeline."
                type: pipeline
            connections:
                description: "Array of information on named connections referenced in the pipeline."
                type: array<Connection>
            correlationId:
                description: "Correlation ID for the request that ties it to a user initiated operation."
                type: string
                optional: true
            options:
                description: "Additional options supplied to the streamProcessor, such as DLQ information."
                type: StartOptions
                optional: true

    streams_stopStreamProcessor:
        description: "Command to stop a stream processor"
        cpp_name: StopStreamProcessorCommand
        command_name: streams_stopStreamProcessor
        api_version: ""
        namespace: ignored
        reply_type: StopStreamProcessorReply
        access_check:
            none: true
        fields:
            name:
                description: "Name of the stream processor."
                type: string
            correlationId:
                description: "Correlation ID for the request that ties it to a user initiated operation."
                type: string
                optional: true

    streams_listStreamProcessors:
        description: "Command to list stream processors"
        cpp_name: ListStreamProcessorsCommand
        command_name: streams_listStreamProcessors
        api_version: ""
        namespace: ignored
        reply_type: ListStreamProcessorsReply
        access_check:
            none: true
        fields:
            correlationId:
                description: "Correlation ID for the request that ties it to a user initiated operation."
                type: string
                optional: true
            verbose:
                description: "If true, more details are returned about each stream processor."
                type: bool
                default: false

    streams_startStreamSample:
        description: "Command to start a stream sample"
        cpp_name: StartStreamSampleCommand
        command_name: streams_startStreamSample
        api_version: ""
        namespace: ignored
        reply_type: StartStreamSampleReply
        access_check:
            none: true
        fields:
            name:
                description: "Name of the stream processor."
                type: string
            limit:
              description: "The maximum number of documents to return."
              type: safeInt
              optional: true
              validator: { gt: 0 }
            correlationId:
                description: "Correlation ID for the request that ties it to a user initiated operation."
                type: string
                optional: true

    streams_getMoreStreamSample:
        cpp_name: GetMoreStreamSampleCommand
        command_name: streams_getMoreStreamSample
        description: "Command to get the next batch of output documents from a stream sample"
        strict: true
        api_version: ""
        namespace: type
        type: long
        reply_type: CursorGetMoreReply
        access_check:
            none: true
        fields:
            name:
                description: "Name of the stream processor."
                type: string
            batchSize:
                description: >
                    The batch size is optional. If not provided, we will put as many documents into the batch
                    as fit within the byte limit.
                type: safeInt
                default: 100
                validator: {gt: 0}
            correlationId:
                description: "Correlation ID for the request that ties it to a user initiated operation."
                type: string
                optional: true

    streams_getStats:
        description: "Command to get stats"
        cpp_name: GetStatsCommand
        command_name: streams_getStats
        api_version: ""
        namespace: ignored
        reply_type: GetStatsReply
        access_check:
            none: true
        fields:
            name:
                description: "Name of the stream processor."
                type: string
            scale:
                description: Divisor to apply to all size fields.
                type: safeInt64
                default: 1
                validator: { gt: 0 }
            verbose:
                description: Returns per-operator stats in the stream pipeline.
                type: bool
                default: false
            correlationId:
                description: "Correlation ID for the request that ties it to a user initiated operation."
                type: string
                optional: true

    streams_testOnlyInsert:
        description: "Test-only command to insert a document into a stream processor"
        cpp_name: TestOnlyInsertCommand
        command_name: streams_testOnlyInsert
        api_version: ""
        namespace: ignored
        reply_type: OkReply
        access_check:
            none: true
        fields:
            name:
                description: "Name of the stream processor."
                type: string
            documents:
                description: "An array of one or more documents to insert."
                type: array<object>

    streams_getMetrics:
        description: "Command to get observability metrics"
        cpp_name: GetMetricsCommand
        command_name: streams_getMetrics
        api_version: ""
        namespace: ignored
        reply_type: GetMetricsReply
        access_check:
            none: true

    streams_updateFeatureFlags:
        description: "Update feature flags for the stream processing instance."
        cpp_name: UpdateFeatureFlagsCommand
        command_name: streams_updateFeatureFlags
        api_version: ""
        namespace: ignored
        reply_type: UpdateFeatureFlagsReply
        fields:
            featureFlags:
                description: "Bson object containing all feature flags for this instance."
                type: object
        access_check:
            none: true

    streams_testOnlyGetFeatureFlags:
        description: "get feature flags for the stream processing instance"
        cpp_name: GetFeatureFlagsCommand
        command_name: streams_testOnlyGetFeatureFlags
        api_version: ""
        namespace: ignored
        reply_type: GetFeatureFlagsReply
        fields:
            streamProcessor:
                description: "stream processor name for which we are requesting feature flags."
                type: string
                optional: true
        access_check:
            none: true
