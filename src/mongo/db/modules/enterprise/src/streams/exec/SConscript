# -*- mode: python -*-

Import('env')

env = env.Clone()
env.InjectThirdParty(libraries=['librdkafka'])

# TODO: add something like InjectStreamsThirdParty('mongocxx') to make this easier.
if env.ToolchainIs('clang'):
    # This section force includes third_party/mongocxx as a clang "isystem" include.
    # We do this to avoid the headers being scanned with clang-tidy, becuase the clang-tidy
    # HeaderFilterRegex does not support exclusions.
    # TODO(SERVER-76494): Remove this workaround once clang-tidy support exclusion of header paths
    env.AppendUnique(
        CXXFLAGS=(
            '-isystem',
            env.Dir('$BUILD_DIR/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist').
            srcnode().abspath,
            '-isystem',
            env.Dir(
                '$BUILD_DIR/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist/platform/linux_x86_64'
            ).srcnode().abspath,
        ))
else:
    env.Append(CPPPATH=[
        '$BUILD_DIR/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist',
        '$BUILD_DIR/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist/platform/linux_x86_64',
    ])

env.SConscript(dirs=['tests'], exports=['env'])

env.Library(
    target='streams_stages_idl',
    source=[
        'common_types.idl',
        'stages.idl',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/client/clientdriver_minimal',
        '$BUILD_DIR/mongo/db/pipeline/aggregation_request_helper',
        '$BUILD_DIR/mongo/db/pipeline/document_sources_idl',
        '$BUILD_DIR/mongo/idl/idl_parser',
    ],
)

env.Library(
    target='streams_document_source_feeder',
    source=[
        'document_source_feeder.cpp',
    ],
    LIBDEPS=['$BUILD_DIR/mongo/base', '$BUILD_DIR/mongo/db/query_exec'],
)

env.Library(
    target='streams_util',
    source=[
        'document_timestamp_extractor.cpp',
        'event_deserializer.cpp',
        'json_event_deserializer.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/query_expressions',
    ],
)

env.Library(
    target='streams_kafka_util',
    source=[
        'fake_kafka_partition_consumer.cpp',
        'kafka_partition_consumer.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/exec/document_value/document_value',
        '$BUILD_DIR/third_party/librdkafka/rdkafka',
        '$BUILD_DIR/third_party/librdkafka/rdkafka++',
        'streams_util',
    ],
)

env.Library(
    target='streams_operators',
    source=[
        'delayed_watermark_generator.cpp',
        'document_source_wrapper_operator.cpp',
        'executor.cpp',
        'in_memory_dead_letter_queue.cpp',
        'in_memory_sink_operator.cpp',
        'in_memory_source_operator.cpp',
        'kafka_consumer_operator.cpp',
        'log_dead_letter_queue.cpp',
        'log_sink_operator.cpp',
        'merge_operator.cpp',
        'mongodb_process_interface.cpp',
        'operator.cpp',
        'operator_dag.cpp',
        'output_sampler.cpp',
        'sink_operator.cpp',
        'source_operator.cpp',
        'time_util.cpp',
        'validate_operator.cpp',
        'watermark_combiner.cpp',
        'watermark_generator.cpp',
        'window_operator.cpp',
        'window_pipeline.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/mongocxx',
        '$BUILD_DIR/mongo/db/query_exec',
        'streams_document_source_feeder',
        'streams_kafka_util',
        'streams_stages_idl',
    ],
)

env.Library(
    target='streams_parser',
    source=[
        'document_source_validate_stub.cpp',
        'document_source_window_stub.cpp',
        'operator_factory.cpp',
        'parser.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/pipeline/aggregation',
        '$BUILD_DIR/mongo/db/pipeline/pipeline',
        '$BUILD_DIR/mongo/db/query_expressions',
        'streams_operators',
    ],
)

env.Benchmark(
    target='streams_operator_dag_bm',
    source='operator_dag_bm.cpp',
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/auth/authmocks',
        '$BUILD_DIR/mongo/db/exec/document_value/document_value',
        '$BUILD_DIR/mongo/db/exec/document_value/document_value_test_util',
        '$BUILD_DIR/mongo/db/query/query_test_service_context',
        '$BUILD_DIR/mongo/db/service_context',
        '$BUILD_DIR/mongo/db/service_context_d_test_fixture',
        '$BUILD_DIR/mongo/db/service_context_test_fixture',
        'streams_parser',
        'tests/streams_test_utils',
    ],
)
