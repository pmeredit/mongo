#
#    Copyright (C) 2023-present MongoDB, Inc. and subject to applicable commercial license.
#

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/db/basic_types.idl"
    # Only used for the OperatorStatsDoc struct.
    - "mongo/db/modules/enterprise/src/streams/exec/exec_internal.idl"

# TOOD(SERVER-78463): Version all these structs so updates are easily supported.
structs:
    WatermarkState:
        description: Watermark state in checkpoint data.
        strict: false
        fields:
            eventTimeMs:
                type: safeInt64

    CheckpointSummaryStats:
        description: Summary statistics for the stream processor.
        strict: false
        fields:
            inputMessageCount:
                description: Total number of input messages read, including docs that were rejected.
                type: safeInt64
            inputMessageSize:
                description: Total number of input bytes read, including messages that were rejected.
                type: safeInt64
            outputMessageCount:
                description: Total number of output messages emitted.
                type: safeInt64
            outputMessageSize:
                description: Total number of output bytes emitted.
                type: safeInt64
            dlqMessageCount:
                description: Total number of messages that were sent to the DLQ
                type: safeInt64
            dlqMessageSize:
                description: Total number of bytes sent to the DLQ
                type: safeInt64

    KafkaPartitionCheckpointState:
        description: Checkpoint state of a single Kafka topic partition in a $source operator.
        strict: false
        fields:
            partition:
                description: Partition number.
                type: int
            offset:
                description: Log offset of the partition.
                type: safeInt64
            watermark:
                description: Event time watermark of the partition.
                type: WatermarkState
                optional: true
            topic:
                description: Topic name.
                type: string
                optional: true

    KafkaSourceCheckpointState:
        description: Checkpoint state of a Kafka $source operator.
        strict: false
        fields:
            partitions:
                type: array<KafkaPartitionCheckpointState>
            consumerGroupId:
                description: Consumer group ID. This is either supplied by the user when the stream processor is created or one is auto-generated.
                type: string
                optional: true
    
    ChangeStreamSourceCheckpointState:
        description: "Checkpoint state of a MongoDB changestream $source operator."
        strict: false
        fields:
            startingPoint:
                type:
                    variant: [object, timestamp]
                # In written checkpoint data, startingPoint will always be set.
                # This is marked as optional only so the ChangeStreamSourceOperator can
                # track when a startingPoint has not yet been chosen.
                optional: true
                description: "If object: the resumeToken to start after. If timestamp: the operation time to start at."
            watermark:
                description: Event time watermark of the changestream.
                type: WatermarkState
                optional: true

    ReplaySourceState:
        description: "Checkpoint state of the $source operator"
        strict: false
        fields:
            checkpointId:
                description: Checkpoint Id of the source state
                type: safeInt64
            sourceState:
                description: Either Kafka $source state or Change stream $source state
                type: object

    WindowReplayInfo:
        description: "Checkpoint state of the $source operator"
        strict: false
        fields:
            sourceStates:
                description: Replay checkpoint source states for open windows
                type: array<ReplaySourceState>
            minWindowStartTime:
                description: The minimum window start time, i.e. the min window we will compute when starting from this checkpoint.
                type: safeInt64

    OperatorState:
        description: The serialized state of a single operator in a checkpoint.
        strict: false
        fields:
            _id:
                description: A primary key string ID that identifies the operator within a checkpoint.
                type: string
            state:
                description: Operator state in the checkpoint.
                type: object

    CheckpointOperatorInfo:
        description: High level information about an operator in a checkpoint, like stats.
        strict: false
        fields:
            operatorId:
                description: The operator's ID.
                type: int
            stats:
                description: The operator's stats at the time of checkpooint.
                type: OperatorStatsDoc

    WindowOperatorStateFastMode:
        description: WindowOperator state when using fast mode checkpointing.
        strict: false
        fields:
            minimumWindowStartTime:
                type: safeInt64

    WindowOperatorStartRecord:
        description: The WindowAwareOperator base class writes this document to mark the start of a new window of data.
        strict: false
        fields:
            "0":
                type: safeInt64
                cpp_name: startTimeMs
                description: Start time of the window in millis.
            "1":
                type: safeInt64
                cpp_name: endTimeMs
                description: End time of the window in millis.
            "2":
                type: StreamMetaSourceType
                cpp_name: sourceType
                optional: true
                description: Source type used in the StreamMeta template for the window.
            "3":
                type: safeInt64
                cpp_name: replayCheckpointId
                optional: true
                description: The replay checkpopint Id for this window.
            # The partition field is only populated for session windows.
            "4":
                type: Value
                cpp_name: partition
                description: "Value identifier for partition"
                optional: true
            # The window ID field is only populated for session windows.
            "5":
                type: safeInt64
                cpp_name: windowID
                description: "Integer identifier for session window"
                optional: true

    WindowOperatorEndRecord:
        description: The WindowAwareOperator base class writes this document to mark the end of a window of data.
        strict: false
        fields:
            "0":
                type: safeInt64
                cpp_name: windowEndMarker
                description: Start time of the window corresponding to this window end marker.

    WindowOperatorLimitRecord:
        description: The WindowLimitAwareOperator class checkpoint state.
        strict: false
        fields:
            "0":
                type: safeInt64
                cpp_name: numSent
                description: Number of documents sent so far in the limit operator.

    WindowAwareGroupRecord:
        description: The WindowAwareGroupOperator checkpoint state format.
        strict: false
        fields:
            "0":
                type: bindata_generic
                description: group key
                cpp_name: groupKey
            "1":
                type: bindata_generic
                description: group accumulators
                cpp_name: groupAccumulators

    # Prefer using digits as the field name with cpp_name rather than a verbose field name so that
    # we limit the size of the field name in the checkpoint data to be a single byte and avoid
    # wasting space in the case where we have many open windows.
    WindowOperatorCheckpointRecord:
        description: A variant type used for all WindowAwareOperator and derived class checkpoint state. Only one field will be set.
        strict: false
        fields:
            "0":
                type: safeInt64
                description: The minimum allowed window start time. This is the first record written in all WindowAwareOperator checkpoints.
                cpp_name: minWindowStartTime
                optional: true
            "1":
                type: WindowOperatorStartRecord
                description: Marks the start of a window of data.
                cpp_name: windowStart
                optional: true
            "2":
                type: WindowOperatorEndRecord
                description: Marks the end of a window of data.
                cpp_name: windowEnd
                optional: true
            "3":
                type:
                    variant: [object, array]
                description: An object field only used in unit testing.
                cpp_name: testOnlyData
                optional: true
            "4":
                type: object
                description: A document in the window sort.
                cpp_name: sortRecord 
                optional: true 
            "5":
                type: WindowOperatorLimitRecord
                description: Limit operator window state.
                cpp_name: limitRecord
                optional: true
            "6":
                type: WindowAwareGroupRecord
                description: A record to save the group key and the corresponding 
                             accumulators state
                cpp_name: groupRecord
                optional: true
            "7":
                type: safeInt64
                description: The minimum allowed window start time after a modify. Prior versions of the stream processor closed windows before this time.
                cpp_name: replayMinWindowStartTime
                optional: true

    # The following types are required by the manifest file format in the LocalDiskCheckpointStorage implementation
    # TODO(SERVER-83755) Consider generating all types in mongo::streams namespace
    CheckpointFileInfo:
        description: Name and checksum of a checkpoint file
        strict: false
        fields:
            name: 
                description: name of the checkpoint file            
                type: string
            checksum:
                description: checksum of the file data            
                type: safeInt64

    CheckpointFiles:
        description: Info about all the checkpoint files
        strict: false
        fields:
            checksumAlgo: 
                description: checksum algo used to compute the checksum of the file contents            
                type: string
            files:
                description: CheckpointFileInfo for each state file            
                type: array<CheckpointFileInfo>

    CheckpointMetadata:
        description: Metadata info about a checkpoint
        strict: false
        fields:
            tenantId:
                type: string
            streamProcessorId: 
                type: string
            checkpointId:
                type: safeInt64
            checkpointStartTime:
                type: date
            checkpointEndTime:
                type: date
            checkpointSizeBytes:
                type: safeInt64
                optional: true
            hostName:
                type: string
                optional: true
            executionPlan:
                type: array<object>
                optional: true
            userPipeline:
                type: array<object>
                optional: true
            operatorStats:
                type: array<CheckpointOperatorInfo>
                optional: true
            pipelineVersion:
                type: int
                optional: true
            summaryStats:
                type: CheckpointSummaryStats
                optional: true
            windowReplayInfo:
                type: WindowReplayInfo
                optional: true

    CheckpointFileRange:
        description: A close-open range of bytes within one file
        strict: false
        fields:
            file: 
                type: string
            begin:
                type: int
            end:
                type: int

    OperatorCheckpointFileRanges:
        description: All the locations for one operator
        strict: false
        fields:
            opid:
                type: int
            fileRanges:
                type: array<CheckpointFileRange>

    Manifest:
        description: This is the on-disk data format of the checkpoint manifest (v1)
        strict: false
        fields:
            version:
                type: int
            metadata:
                type: CheckpointMetadata
            checkpointFileList:
                type: CheckpointFiles
                optional: true
            operatorCheckpointFileRanges:
                type: array<OperatorCheckpointFileRanges>
                optional: true
