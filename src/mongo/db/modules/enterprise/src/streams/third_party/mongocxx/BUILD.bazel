load("//bazel:mongo_src_rules.bzl", "idl_generator", "mongo_cc_library")

package(default_visibility = ["//src/mongo/db/modules/enterprise:__subpackages__"])

exports_files(
    glob([
        "*.h",
        "*.cpp",
    ]),
)

MONGOCXX_LOCAL_DEFINES = [
    "MONGOC_COMPILATION",
]

MONGOCXX_TARGET_COMPATIBILITY = select({
    "//bazel/config:linux_aarch64": [],
    "//bazel/config:linux_x86_64": [],
    "//conditions:default": ["@platforms//:incompatible"],
})

# TODO(SERVER-76494): Switch -isystem to -I once clang-tidy support exclusion of header paths
MONGOCXX_COPTS = [
    # Source file include path
    "-isystemsrc/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist",
    "-isystemsrc/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist/mongoc",
    "-isystemsrc/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist/mongoc/common",
    # To support #include <bson.h> in mongoc source
    "-isystemsrc/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist",
    "-isystemsrc/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist/bson",
] + select({
    # Platform specific source file include path
    # TODO https://jira.mongodb.org/browse/SERVER-74961: Support other platforms.
    "@platforms//cpu:x86_64": [
        "-isystemsrc/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist/platform/linux_x86_64",
        "-isystemsrc/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist/platform/linux_x86_64/mongoc",
    ],
    "@platforms//cpu:aarch64": [
        "-isystemsrc/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist/platform/linux_aarch64",
        "-isystemsrc/mongo/db/modules/enterprise/src/streams/third_party/mongocxx/dist/platform/linux_aarch64/mongoc",
    ],
    "//conditions:default": [],
}) + [
    "-Wno-implicit-fallthrough",
    "-Wno-sign-compare",
] + select({
    "@platforms//os:windows": [],
    "//conditions:default": ["-Wno-deprecated"],
})

mongo_cc_library(
    name = "bsoncxx",
    srcs = [
        "dist/bsoncxx/array/element.cpp",
        "dist/bsoncxx/array/value.cpp",
        "dist/bsoncxx/array/view.cpp",
        "dist/bsoncxx/builder/core.cpp",
        "dist/bsoncxx/decimal128.cpp",
        "dist/bsoncxx/document/element.cpp",
        "dist/bsoncxx/document/value.cpp",
        "dist/bsoncxx/document/view.cpp",
        "dist/bsoncxx/exception/error_code.cpp",
        "dist/bsoncxx/json.cpp",
        "dist/bsoncxx/oid.cpp",
        "dist/bsoncxx/private/itoa.cpp",
        "dist/bsoncxx/string/view_or_value.cpp",
        "dist/bsoncxx/types.cpp",
        "dist/bsoncxx/types/bson_value/value.cpp",
        "dist/bsoncxx/types/bson_value/view.cpp",
        "dist/bsoncxx/validate.cpp",
    ] + glob([
        "**/*.h",
        "**/*.hpp",
        "**/*.hh",
    ]),
    copts = MONGOCXX_COPTS,
    local_defines = MONGOCXX_LOCAL_DEFINES,
    target_compatible_with = MONGOCXX_TARGET_COMPATIBILITY,
    visibility = ["//visibility:public"],
    deps = [
        "//src/mongo/util:boost_assert_shim",
        "//src/third_party/libbson:bson",
    ],
)

mongo_cc_library(
    name = "mongoc",
    srcs = glob([
        "**/*.c",
    ]) + glob([
        "**/*.h",
        "**/*.hpp",
        "**/*.hh",
    ]),
    hdrs = glob([
        "**/*.def",
        "**/*.defs",
    ]),
    copts = MONGOCXX_COPTS,
    linkopts = [
        "-lsasl2",
    ],
    local_defines = MONGOCXX_LOCAL_DEFINES,
    no_undefined_ref_DO_NOT_USE = False,
    target_compatible_with = MONGOCXX_TARGET_COMPATIBILITY,
    deps = [
        "//src/third_party/icu4c-57.1/source:icu_i18n",
        "//src/third_party/libbson:bson",
        "//src/third_party/libmongocrypt:mongocrypt",
        "//src/third_party/snappy",
        "//src/third_party/zstandard:zstd",
    ],
)

mongo_cc_library(
    name = "mongocxx",
    srcs = [
        "dist/mongocxx/bulk_write.cpp",
        "dist/mongocxx/change_stream.cpp",
        "dist/mongocxx/client.cpp",
        "dist/mongocxx/client_encryption.cpp",
        "dist/mongocxx/client_session.cpp",
        "dist/mongocxx/collection.cpp",
        "dist/mongocxx/cursor.cpp",
        "dist/mongocxx/database.cpp",
        "dist/mongocxx/events/command_failed_event.cpp",
        "dist/mongocxx/events/command_started_event.cpp",
        "dist/mongocxx/events/command_succeeded_event.cpp",
        "dist/mongocxx/events/heartbeat_failed_event.cpp",
        "dist/mongocxx/events/heartbeat_started_event.cpp",
        "dist/mongocxx/events/heartbeat_succeeded_event.cpp",
        "dist/mongocxx/events/server_changed_event.cpp",
        "dist/mongocxx/events/server_closed_event.cpp",
        "dist/mongocxx/events/server_description.cpp",
        "dist/mongocxx/events/server_opening_event.cpp",
        "dist/mongocxx/events/topology_changed_event.cpp",
        "dist/mongocxx/events/topology_closed_event.cpp",
        "dist/mongocxx/events/topology_description.cpp",
        "dist/mongocxx/events/topology_opening_event.cpp",
        "dist/mongocxx/exception/error_code.cpp",
        "dist/mongocxx/exception/operation_exception.cpp",
        "dist/mongocxx/exception/server_error_code.cpp",
        "dist/mongocxx/gridfs/bucket.cpp",
        "dist/mongocxx/gridfs/downloader.cpp",
        "dist/mongocxx/gridfs/uploader.cpp",
        "dist/mongocxx/hint.cpp",
        "dist/mongocxx/index_model.cpp",
        "dist/mongocxx/index_view.cpp",
        "dist/mongocxx/instance.cpp",
        "dist/mongocxx/logger.cpp",
        "dist/mongocxx/model/delete_many.cpp",
        "dist/mongocxx/model/delete_one.cpp",
        "dist/mongocxx/model/insert_one.cpp",
        "dist/mongocxx/model/replace_one.cpp",
        "dist/mongocxx/model/update_many.cpp",
        "dist/mongocxx/model/update_one.cpp",
        "dist/mongocxx/model/write.cpp",
        "dist/mongocxx/options/aggregate.cpp",
        "dist/mongocxx/options/apm.cpp",
        "dist/mongocxx/options/auto_encryption.cpp",
        "dist/mongocxx/options/bulk_write.cpp",
        "dist/mongocxx/options/change_stream.cpp",
        "dist/mongocxx/options/client.cpp",
        "dist/mongocxx/options/client_encryption.cpp",
        "dist/mongocxx/options/client_session.cpp",
        "dist/mongocxx/options/count.cpp",
        "dist/mongocxx/options/create_collection.cpp",
        "dist/mongocxx/options/data_key.cpp",
        "dist/mongocxx/options/delete.cpp",
        "dist/mongocxx/options/distinct.cpp",
        "dist/mongocxx/options/encrypt.cpp",
        "dist/mongocxx/options/estimated_document_count.cpp",
        "dist/mongocxx/options/find.cpp",
        "dist/mongocxx/options/find_one_and_delete.cpp",
        "dist/mongocxx/options/find_one_and_replace.cpp",
        "dist/mongocxx/options/find_one_and_update.cpp",
        "dist/mongocxx/options/gridfs/bucket.cpp",
        "dist/mongocxx/options/gridfs/upload.cpp",
        "dist/mongocxx/options/index.cpp",
        "dist/mongocxx/options/index_view.cpp",
        "dist/mongocxx/options/insert.cpp",
        "dist/mongocxx/options/pool.cpp",
        "dist/mongocxx/options/replace.cpp",
        "dist/mongocxx/options/server_api.cpp",
        "dist/mongocxx/options/tls.cpp",
        "dist/mongocxx/options/transaction.cpp",
        "dist/mongocxx/options/update.cpp",
        "dist/mongocxx/pipeline.cpp",
        "dist/mongocxx/pool.cpp",
        "dist/mongocxx/private/conversions.cpp",
        "dist/mongocxx/private/libbson.cpp",
        "dist/mongocxx/private/libmongoc.cpp",
        "dist/mongocxx/private/numeric_casting.cpp",
        "dist/mongocxx/read_concern.cpp",
        "dist/mongocxx/read_preference.cpp",
        "dist/mongocxx/result/bulk_write.cpp",
        "dist/mongocxx/result/delete.cpp",
        "dist/mongocxx/result/gridfs/upload.cpp",
        "dist/mongocxx/result/insert_many.cpp",
        "dist/mongocxx/result/insert_one.cpp",
        "dist/mongocxx/result/replace_one.cpp",
        "dist/mongocxx/result/update.cpp",
        "dist/mongocxx/uri.cpp",
        "dist/mongocxx/validation_criteria.cpp",
        "dist/mongocxx/write_concern.cpp",
    ] + glob([
        "**/*.h",
        "**/*.hpp",
        "**/*.hh",
    ]),
    hdrs = glob([
        "**/*.def",
        "**/*.defs",
    ]),
    copts = MONGOCXX_COPTS + [
        "-Wno-pessimizing-move",
        "-Wno-uninitialized",
    ],
    local_defines = MONGOCXX_LOCAL_DEFINES,
    target_compatible_with = MONGOCXX_TARGET_COMPATIBILITY,
    deps = [
        "bsoncxx",
        "mongoc",
        "//src/mongo/util:boost_assert_shim",
        "//src/third_party/libbson:bson",
    ],
)
