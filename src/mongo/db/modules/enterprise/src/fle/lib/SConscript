# -*- mode: python; -*-


from functools import partial
import libdeps

Import("env")
Import("get_option")

env = env.Clone()

csfleEnv = env.Clone()
csfleEnv.AppendUnique(
    CPPDEFINES=[
        'CSFLE_SUPPORT_COMPILING',
     ],
)

def mongo_export_file_generator(target, source, env, for_signature):
    if env.ToolchainIs('msvc'):
        pass
    elif env.TargetOSIs('darwin'):
        pass
    elif env.TargetOSIs('posix'):
        script = env.File(env.subst("${TARGET.base}.version_script", target=target))
        return script.get_csig() if for_signature else "-Wl,--version-script," + str(script)
    else:
        pass

if get_option('link-model') == 'dynamic-sdk' and env.TargetOSIs('posix', 'windows'):
    csfleEnv['LIBDEPS_SHLIBEMITTER'] = partial(
        libdeps.libdeps_emitter,
        builder='SharedArchive',
        visibility_map=libdeps.dependency_visibility_honored,
    )

    csfleEnv['MONGO_EXPORT_FILE_SHLINKFLAGS'] = mongo_export_file_generator
    csfleEnv.AppendUnique(
        SHLINKFLAGS=[
            '$MONGO_EXPORT_FILE_SHLINKFLAGS',
        ],
    )

    csfleSupportTargets = csfleEnv.SharedLibrary(
        target='mongo_csfle_v1',
        source=[
            'mongo_csfle.cpp',
        ],
        LIBDEPS_PRIVATE=[
            '$BUILD_DIR/mongo/base',
            '$BUILD_DIR/mongo/db/service_context',
            '$BUILD_DIR/mongo/util/options_parser/options_parser',
            '../query_analysis/cryptd_query_analysis',
        ],
        AIB_COMPONENT='mongo-csfle',
        SHLIBPREFIX="",
    )

    env.AutoInstall(
        '$PREFIX_INCLUDEDIR/mongo_csfle/v1/mongo_csfle',
        source=['mongo_csfle.h'],
        AIB_COMPONENT='mongo-csfle',
        AIB_ROLE='dev',
    )

    env.AutoInstall(
        '$PREFIX/share/licenses/mongo_csfle/',
        source=['../../../distsrc/LICENSE-Enterprise.txt'],
        AIB_COMPONENT='mongo-csfle',
        AIB_ROLE='dev',
    )

if get_option('link-model') != 'dynamic-sdk':
    csfleTestEnv = env.Clone()
    csfleTestEnv.AppendUnique(
        CPPDEFINES=[
            'CSFLE_SUPPORT_STATIC',
        ],
    )

    unitTest = csfleTestEnv.CppUnitTest(
        target="mongo_csfle_test",
        source=[
            'mongo_csfle.cpp',
            "mongo_csfle_test.cpp",
        ],
        LIBDEPS=[
            '$BUILD_DIR/mongo/db/service_context_test_fixture',
            '$BUILD_DIR/mongo/unittest/unittest',
            '../query_analysis/cryptd_query_analysis',
        ],
        UNITTEST_HAS_CUSTOM_MAINLINE=True,
        AIB_COMPONENT='mongo-csfle-test',
    )
