load("//bazel:mongo_src_rules.bzl", "idl_generator", "mongo_cc_library", "mongo_cc_unit_test")

package(default_visibility = ["//src/mongo/db/modules/enterprise:__subpackages__"])

exports_files(
    glob([
        "*.h",
        "*.cpp",
    ]),
)

idl_generator(
    name = "oidc_commands_gen",
    src = "oidc_commands.idl",
    deps = [
        "//src/mongo/db:basic_types_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

idl_generator(
    name = "oidc_parameters_gen",
    src = "oidc_parameters.idl",
    deps = [
        "//src/mongo/db:basic_types_gen",
    ],
)

idl_generator(
    name = "sasl_aws_server_options_gen",
    src = "sasl_aws_server_options.idl",
)

idl_generator(
    name = "auth_delay_gen",
    src = "auth_delay.idl",
)

mongo_cc_library(
    name = "auth_delay",
    srcs = [
        ":auth_delay_gen",
    ],
    hdrs = [
        ":auth_delay_gen",
        "//src/mongo/base:error_codes_header",
        "//src/mongo/db/auth:sasl_options.h",
        "//src/mongo/util/version:releases_header",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/mongo/db:server_base",
        "//src/mongo/db/auth:sasl_options",
    ],
)

mongo_cc_library(
    name = "sasl_aws_server",
    srcs = [
        "sasl_aws_server_protocol.cpp",
    ],
    hdrs = [
        "sasl_aws_server_protocol.h",
        "//src/mongo/base:data_type_validated.h",
        "//src/mongo/client:sasl_aws_protocol_common.h",
        "//src/mongo/rpc:object_check.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/bson:bson_validate",
        "//src/mongo/client:sasl_aws_common",
        "//src/mongo/db:connection_health_metrics_parameter",
        "//src/mongo/db:server_base",
    ],
)

mongo_cc_library(
    name = "mongosaslserversession",
    srcs = [
        "canon_mongodb_internal.cpp",
        "sasl_aws_server_conversation.cpp",
        "sasl_aws_server_options_gen",
    ] + select({
        "@platforms//os:windows": [
            "auxprop_mongodb_internal.cpp",
            "mongo_sspi.cpp",
        ],
        "//conditions:default": ["mongo_gssapi.cpp"],
    }),
    hdrs = [
        "mongo_gssapi.h",
        "sasl_aws_server_conversation.h",
    ] + select({
        "@platforms//os:windows": ["cyrus_sasl_authentication_session.h"],
        "//conditions:default": [],
    }),
    linkopts = select({
        "@platforms//os:windows": [
            "secur32.lib",
            "sasl2.lib",
        ],
        "//conditions:default": [
            "-lgssapi_krb5",
            "-lsasl2",
        ],
    }),
    deps = [
        "sasl_aws_server",
        "//src/mongo/db:service_context",
        "//src/mongo/db/auth:saslauth",
        "//src/mongo/util/net:http_client",
    ] + select({
        "@platforms//os:windows": [],
        "//conditions:default": ["//src/mongo/db/modules/enterprise/src/util:gssapi_helpers"],
    }),
)

mongo_cc_library(
    name = "mongosaslservercommon",
    srcs = [
        "cyrus_sasl_authentication_session.cpp",
        "ldap_sasl_authentication_session.cpp",
    ],
    hdrs = [
        "cyrus_sasl_authentication_session.h",
        "//src/mongo/db:catalog_raii.h",
        "//src/mongo/db:db_raii.h",
        "//src/mongo/db/auth:authz_session_external_state_mock.h",
        "//src/mongo/db/catalog:local_oplog_info.h",
        "//src/mongo/db/stats:operation_latency_histogram.h",
        "//src/mongo/db/stats:top.h",
    ],
    linkopts = select({
        "@platforms//os:windows": [
            "secur32.lib",
            "sasl2.lib",
        ],
        "//conditions:default": [
            "-lgssapi_krb5",
            "-lsasl2",
        ],
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":mongosaslserversession",
        "//src/mongo/db/modules/enterprise/src/ldap:ldap_manager",
        "//src/mongo/db/modules/enterprise/src/ldap:ldap_name_map",
        "//src/mongo/db/query/query_stats",
    ],
)

mongo_cc_library(
    name = "authz_manager_factory_enterprise",
    srcs = [
        "authorization_manager_factory_enterprise_impl.cpp",
    ],
    hdrs = [
        "authorization_manager_factory_enterprise_impl.h",
        "identity_provider.h",
        "idp_jwks_refresher.h",
        "idp_manager.h",
        "oidc_parameters_gen",
        "sasl_oidc_server_conversation.h",
        "user_request_oidc.h",
        "//src/mongo/crypto:jwk_manager.h",
        "//src/mongo/crypto:jwks_fetcher.h",
        "//src/mongo/crypto:jwks_fetcher_factory.h",
        "//src/mongo/crypto:jws_validated_token.h",
        "//src/mongo/crypto:jws_validator.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/mongo/db:service_context",
        "//src/mongo/db/auth:authserver",
        "//src/mongo/db/modules/enterprise/src/ldap:ldap_manager",
        "//src/mongo/db/modules/enterprise/src/ldap:mongo_ldap",
        "//src/mongo/util:background_job",
    ] + select({
        "//bazel/config:mongo_crypto_openssl": [":sasl_oidc_server"],
        "//conditions:default": [],
    }),
)

mongo_cc_library(
    name = "sasl_oidc_server",
    srcs = [
        "identity_provider.cpp",
        "idp_jwks_refresher.cpp",
        "idp_manager.cpp",
        "oidc_commands.cpp",
        "oidc_commands_gen",
        "oidc_parameters_gen",
        "sasl_oidc_server_conversation.cpp",
        "user_request_oidc.cpp",
    ],
    hdrs = [
        "identity_provider.h",
        "idp_jwks_refresher.h",
        "idp_manager.h",
        "sasl_oidc_server_conversation.h",
        "user_request_oidc.h",
        "//src/mongo/crypto:jwks_fetcher_factory.h",
    ],
    target_compatible_with = select({
        "//bazel/config:mongo_crypto_openssl": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        "//src/mongo/crypto:jwt",
        "//src/mongo/db:commands",
        "//src/mongo/db:server_base",
        "//src/mongo/db:server_feature_flags",
        "//src/mongo/db/auth:auth_impl_internal",
        "//src/mongo/db/auth:sasl_mechanism_protocol",
        "//src/mongo/db/auth:sasl_options",
        "//src/mongo/db/auth:sasl_options_init",
        "//src/mongo/db/auth:saslauth",
        "//src/mongo/db/commands:test_commands_enabled",
        "//src/mongo/util:background_job",
        "//src/mongo/util:pcre_wrapper",
    ],
)

mongo_cc_unit_test(
    name = "sasl_oidc_server_test",
    srcs = [
        "idp_manager_test.cpp",
        "oidc_core_options_stub.cpp",
        "//src/mongo/crypto:jwks_fetcher_mock.h",
    ],
    tags = ["mongo_unittest_first_group"],
    target_compatible_with = select({
        "//bazel/config:mongo_crypto_openssl": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":sasl_oidc_server",
        "//src/mongo/crypto:jwt",
        "//src/mongo/db:server_base",
        "//src/mongo/db:server_feature_flags",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/mongo/util:clock_source_mock",
    ],
)

mongo_cc_unit_test(
    name = "sasl_aws_protocol_test",
    srcs = [
        "sasl_aws_protocol_test.cpp",
    ],
    tags = ["mongo_unittest_third_group"],
    deps = [
        ":sasl_aws_server",
        "//src/mongo/client:sasl_aws_client",
        "//src/mongo/client:sasl_aws_common",
        "//src/mongo/db/auth:sasl_options",
        "//src/third_party/libmongocrypt:mongocrypt",
    ],
)

mongo_cc_unit_test(
    name = "sasl_authentication_session_gssapi_test",
    srcs = [
        "sasl_authentication_session_gssapi_test.cpp",
    ],
    data = [
        "//jstests/libs:mock_keytabs",
        "//jstests/libs:mock_krb5",
    ],
    has_custom_mainline = True,
    tags = [
        "mongo_unittest_fourth_group",
        # System call appears to fail in sandbox
        "code_coverage_quarantine",
        "code_coverage_quarantine_SERVER-98845",
    ],
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    deps = [
        ":mongosaslservercommon",
        ":mongosaslserversession",
        "//src/mongo:base",
        "//src/mongo/client:clientdriver_network",
        "//src/mongo/client:cyrus_sasl_client",
        "//src/mongo/db:service_context_non_d",
        "//src/mongo/db:service_context_test_fixture",
        "//src/mongo/db/auth",
        "//src/mongo/db/auth:authmocks",
        "//src/mongo/db/auth:saslauth",
        "//src/mongo/db/modules/enterprise/src/ldap:ldap_manager_init",
        "//src/mongo/executor:network_interface_factory",
        "//src/mongo/executor:network_interface_thread_pool",
        "//src/mongo/executor:thread_pool_task_executor",
        "//src/mongo/unittest",
        "//src/mongo/util/net:network",
    ],
)

mongo_cc_library(
    name = "cyrus_sasl_windows_test_plugin",
    srcs = ["cyrus_sasl_windows_test_plugin.cpp"],
    linkshared = True,
    skip_global_deps = [
        "allocator",
    ],
    tags = ["dist_test"],
    target_compatible_with = select({
        "@platforms//os:windows": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
)
