# -*- mode: python -*-

import os

Import("env has_option")
Import("get_option")
Import("http_client")

feature_dirs = [
    "audit",
    "encryptdb",
    "fcbis",
    "fips",
    "fle",
    "hot_backups",
    "kerberos",
    "ldap",
    "magic_restore",
    "queryable",
    "sasl",
]

env = env.Clone()

if env.ShouldBuildStreams():
    feature_dirs.append("streams")

if get_option("lint-scope") == "changed":
    patch_file = env.Command(
        target="$BUILD_DIR/current.enterprise.git.patch",
        source=[env.WhereIs("git"), env.Dir(".").srcnode().get_abspath()],
        action="cd ${SOURCES[1]} && ${SOURCES[0]} diff $GITDIFFFLAGS > ${TARGET.abspath}",
    )

    env.AlwaysBuild(patch_file)

    pylinters = env.Command(
        target="#lint-pylinters-enterprise",
        source=["#buildscripts/pylinters.py"],
        action="$PYTHON ${SOURCES[0]} lint",
    )

    clang_format = env.Command(
        target="#lint-clang-format-enterprise",
        source=[
            "#buildscripts/clang_format.py",
            patch_file,
        ],
        action="$PYTHON ${SOURCES[0]} lint-patch ${SOURCES[1]}",
    )

    eslint = env.Command(
        target="#lint-eslint-enterprise",
        source=[
            "#buildscripts/eslint.py",
            patch_file,
        ],
        action="$PYTHON ${SOURCES[0]} lint-patch ${SOURCES[1]}",
    )

    env.Alias("lint-fast", [eslint, clang_format, pylinters])
    env.Alias("lint", [eslint, clang_format, pylinters])

if set(["fle"]).issubset(set(env["MONGO_ENTERPRISE_FEATURES"])):
    print(
        "This is an Mongo Crypt Shared only build. Allowing to build with no http client and SSL libs."
    )
else:
    if get_option("ssl") != "on":
        env.FatalError("SSL not enabled. Enterprise MongoDB must be built with --ssl specified")

    if http_client != "on":
        env.FatalError("Enterprise build requires http client support")

env.InjectMongoIncludePaths()
env.InjectModule("enterprise", builder=True, consumer=False)

# Code in the enterprise module follows the basic.h practices of the community repo.
env.AppendUnique(
    FORCEINCLUDES=[
        "mongo/platform/basic.h",
    ],
)

env.SConscript(
    must_exist=1,
    dirs=[
        "src/kmip",
    ]
    + [
        "src/%s" % feature
        for feature in env.Flatten(feature_dirs)
        if feature in env["MONGO_ENTERPRISE_FEATURES"]
    ],
    exports=[
        "env",
    ],
)

if env.TargetOSIs("windows"):
    libs = []

    if "sasl" in env["MONGO_ENTERPRISE_FEATURES"]:
        libs += [
            {
                "files": ["sasl2.dll", "sasl2.pdb"],
                "component": "common",
                "components_extra": [
                    "mongo",
                    "shell",
                    "mongod",
                    "mongos",
                    "core",
                    "servers",
                    "dist",
                    "dist-test",
                ],
            }
        ]

    paths = [str(env.Dir(libpath).Dir("..").Dir("bin")) for libpath in env.get("LIBPATH", [])]

    for lib in libs:
        for lib_file in lib["files"]:
            for path in paths:
                full_file_name = os.path.join(os.path.normpath(path.lower()), lib_file)
                if os.path.exists(full_file_name):
                    env.AutoInstall(
                        target="$PREFIX_BINDIR",
                        source=[full_file_name],
                        AIB_COMPONENT=lib["component"],
                        AIB_COMPONENTS_EXTRA=lib["components_extra"],
                        AIB_ROLE="debug" if full_file_name.endswith(".pdb") else "runtime",
                    )
