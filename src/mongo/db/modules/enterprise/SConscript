# -*- mode: python -*-

import os


Import("env has_option")
Import("get_option")
Import("http_client")

feature_dirs = [
    "audit",
    "encryptdb",
    "fcbis",
    "fips",
    "fle",
    "hot_backups",
    "inmemory",
    "kerberos",
    "ldap",
    "live_import",
    "mongohouse",
    "queryable",
    "sasl",
    "search",
    "snmp" if not env.TargetOSIs('darwin') else [],
]

env = env.Clone()

if get_option('lint-scope') == 'changed':
    patch_file = env.Command(
        target="$BUILD_DIR/current.enterprise.git.patch",
        source=[env.WhereIs("git"), env.Dir(".").srcnode().get_abspath()],
        action="cd ${SOURCES[1]} && ${SOURCES[0]} diff $GITDIFFFLAGS > ${TARGET.abspath}"
    )

    env.AlwaysBuild(patch_file)

    pylinters = env.Command(
        target="#lint-pylinters-enteprise",
        source=[
            "#buildscripts/pylinters.py",
            patch_file,
        ],
        action="$PYTHON ${SOURCES[0]} lint-patch ${SOURCES[1]}"
    )

    clang_format = env.Command(
        target="#lint-clang-format-enterprise",
        source=[
            "#buildscripts/clang_format.py",
            patch_file,
        ],
        action="$PYTHON ${SOURCES[0]} lint-patch ${SOURCES[1]}"
    )

    eslint = env.Command(
        target="#lint-eslint-enterprise",
        source=[
            "#buildscripts/eslint.py",
            patch_file,
        ],
        action="$PYTHON ${SOURCES[0]} lint-patch ${SOURCES[1]}"
    )

    env.Alias( "lint-fast" , [ eslint, clang_format, pylinters ] )
    env.Alias( "lint" , [ eslint, clang_format, pylinters ] )


if get_option( "ssl" ) != "on":
    env.FatalError("SSL not enabled. Enterprise MongoDB must be built with --ssl specified")

if http_client != "on":
    env.FatalError("Enterprise build requires http client support")

env.InjectMongoIncludePaths()
env.InjectModule("enterprise", builder=True, consumer=False)

# Code in the enterprise module follows the basic.h practices of the community repo.
env.AppendUnique(
    FORCEINCLUDES=[
        'mongo/platform/basic.h',
    ],
)

env.SConscript(
    dirs=['src/util'] + [
        "src/%s" % feature
        for feature in env.Flatten(feature_dirs)
        if feature in env['MONGO_ENTERPRISE_FEATURES']
    ],
    exports=[
        'env',
    ],
)

# SNMP doc files
env.AutoInstall(
    target='$PREFIX/snmp',
    source=env.Glob("docs/*"),
    AIB_COMPONENT='snmp',
    AIB_COMPONENTS_EXTRA=[
        'dist',
        'dist-test',
    ],
    AIB_ROLE="base",
)

if env.TargetOSIs("windows"):

    extra_files = []

    if 'sasl' in env['MONGO_ENTERPRISE_FEATURES']:
        extra_files.extend([
            'libsasl.dll',
            'libsasl.pdb',
        ])

    if 'snmp' in env['MONGO_ENTERPRISE_FEATURES']:
        extra_files.extend([
            'netsnmp.dll',
            'netsnmp.pdb',
        ])

    for file_name in extra_files:
        paths = [str(env.Dir(libpath).Dir('..').Dir('bin')) for libpath in env.get('LIBPATH', [])]
        for path in paths:
            full_file_name = os.path.join(os.path.normpath(path.lower()), file_name)
            if os.path.exists(full_file_name):
                env.AutoInstall(
                    target='$PREFIX_BINDIR',
                    source=[full_file_name],
                    AIB_COMPONENT='dist',
                    AIB_COMPONENTS_EXTRA=[
                        'dist-test',
                    ],
                    AIB_ROLE="debug" if full_file_name.endswith(".pdb") else "runtime",
                )
