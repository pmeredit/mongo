load("//bazel:mongo_src_rules.bzl", "idl_generator", "mongo_cc_library")
load("//bazel/config:render_template.bzl", "render_template")
load("@poetry//:dependencies.bzl", "dependency")

package(default_visibility = ["//visibility:public"])

exports_files(
    glob([
        "*.h",
        "*.cpp",
    ]),
)

mongo_cc_library(
    name = "benchrun",
    srcs = [
        "bench.cpp",
    ],
    hdrs = [
        "bench.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/client:clientdriver_minimal",
        "//src/mongo/db/session:logical_session_id",  # TODO(SERVER-93876): Remove.
        "//src/mongo/scripting:bson_template_evaluator",
        "//src/mongo/util:pcre_util",
        "//src/mongo/util:pcre_wrapper",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "program_runner",
    srcs = [
        "program_runner.cpp",
    ],
    hdrs = [
        "program_runner.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/base:environment_buffer",
        "//src/mongo/db:service_context",
    ],
)

mongo_cc_library(
    name = "linenoise_utf8",
    srcs = [
        "linenoise_utf8.cpp",
    ],
    hdrs = [
        "linenoise_utf8.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "shell_options_storage",
    srcs = [
        "shell_options_storage.cpp",
    ],
    hdrs = [
        "shell_options.h",
    ],
    copts = select({
        "@platforms//os:windows": [
            # See the /Zc:preprocessor comment in third_party/mozjs/SConscript
            "/Zc:preprocessor",
            "/wd5104",
            "/wd5105",
        ],
        "//conditions:default": [],
    }),
    deps = [
        "//src/mongo:base",
        "//src/mongo/client:connection_string",
        "//src/mongo/util/cmdline_utils",
    ],
)

idl_generator(
    name = "shell_options_gen",
    src = "shell_options.idl",
    deps = [
        "//src/mongo/db:basic_types_gen",
    ],
)

idl_generator(
    name = "shell_options_grpc_gen",
    src = "shell_options_grpc.idl",
    deps = [
        "//src/mongo/db:basic_types_gen",
    ],
)

idl_generator(
    name = "kms_gen",
    src = "kms.idl",
    deps = [
        "//src/mongo/db:basic_types_gen",
    ],
)

mongo_cc_library(
    name = "kms_idl",
    srcs = [
        ":kms_gen",
    ],
    deps = [
        "//src/mongo/db:server_base",
    ],
)

mongo_cc_library(
    name = "kms",
    srcs = [
        "kms.cpp",
        "kms_local.cpp",
    ],
    hdrs = [
        "kms.h",
    ],
    deps = [
        ":kms_idl",
        "//src/mongo:base",
        "//src/mongo/base:secure_allocator",  # TODO(SERVER-93876): Remove.
        "//src/mongo/crypto:aead_encryption",
        "//src/mongo/db/commands:test_commands_enabled",
    ],
)

mongo_cc_library(
    name = "linenoise",
    srcs = [
        "linenoise.cpp",
        "mk_wcwidth.cpp",
    ],
    hdrs = [
        "linenoise.h",
        "mk_wcwidth.h",
    ],
    deps = [
        ":linenoise_utf8",
    ],
)

# Files added here need to be added in scripting/engine.cpp and buildscripts/vcxproj.header as well.
render_template(
    name = "error_codes_js",
    srcs = [
        "error_codes.tpl.js",
        "//src/mongo/base:error_codes.yml",
        "//src/mongo/base:generate_error_codes.py",
    ],
    cmd = [
        "$(location //src/mongo/base:generate_error_codes.py)",
        "$(location //src/mongo/base:error_codes.yml)",
        "$(location error_codes.tpl.js)",
        "$(location error_codes.js)",
    ],
    output = "error_codes.js",
    python_libs = [
        dependency(
            "cheetah3",
            group = "compile",
        ),
        dependency(
            "pyyaml",
            group = "core",
        ),
    ],
)

MONGOJS_CPP_JSFILES = [
    "assert.js",
    "bulk_api.js",
    "check_log.js",
    "collection.js",
    "crud_api.js",
    "db.js",
    "explain_query.js",
    "explainable.js",
    "mongo.js",
    "prelude.js",
    "query.js",
    "session.js",
    "types.js",
    "utils.js",
    "utils_auth.js",
    "utils_sh.js",
    ":error_codes_js",
]

render_template(
    name = "mongojs_cpp",
    srcs = [
        "//site_scons/site_tools:jstoh.py",
    ] + MONGOJS_CPP_JSFILES,
    cmd = [
        "$(location //site_scons/site_tools:jstoh.py)",
        "$(location mongojs.cpp)",
    ] + [
        "$(location {})".format(file)
        for file in MONGOJS_CPP_JSFILES
    ],
    output = "mongojs.cpp",
)

MONGO_SERVER_CPP_JS_FILES = [
    "bridge.js",
    "data_consistency_checker.js",
    "feature_compatibility_version.js",
    "keyvault.js",
    "servers.js",
    "servers_misc.js",
]

render_template(
    name = "mongo_server_cpp",
    srcs = [
        "//site_scons/site_tools:jstoh.py",
    ] + MONGO_SERVER_CPP_JS_FILES,
    cmd = [
        "$(location //site_scons/site_tools:jstoh.py)",
        "$(location mongo-server.cpp)",
    ] + [
        "$(location {})".format(file)
        for file in MONGO_SERVER_CPP_JS_FILES
    ],
    output = "mongo-server.cpp",
)

mongo_cc_library(
    name = "mongojs",
    srcs = [
        "mongojs.cpp",
    ],
    header_deps = [
        "//src/mongo/db/op_observer:op_observer",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "shell_options_register",
    srcs = [
        "shell_options_gen",
    ] + select({
        "//bazel/config:build_grpc_enabled": ["shell_options_grpc_gen"],
        "//conditions:default": {},
    }),
    hdrs = [
        "shell_utils.h",
    ],
    deps = [
        "shell_options_storage",
        "//src/mongo:base",
        "//src/mongo/client:native_sasl_client",
        "//src/mongo/util/options_parser",
    ],
)
