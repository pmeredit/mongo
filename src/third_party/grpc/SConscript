Import('env')

import os

grpc_env = env.Clone()

grpc_env.InjectThirdParty(libraries=['abseil-cpp', 're2', 'cares', 'protobuf', 'zlib'])

if grpc_env.ToolchainIs('gcc', 'clang'):

    grpc_env.Append(CCFLAGS=[
        '-Wno-error=sign-compare',
        '-Wno-error=comment',
    ], )

    if grpc_env.ToolchainIs('gcc'):
        grpc_env.Append(
            CCFLAGS=[
                '-Wno-stringop-overread',  # false positive: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98465#c30
                '-Wno-stringop-overflow',
                '-Wno-error=attributes',
                '-Wno-error=class-memaccess',
                '-Wno-error=overloaded-virtual',
            ], )

grpc_env.Append(CPPDEFINES=[
    '_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING',
], )

if grpc_env.ToolchainIs('msvc'):
    grpc_env.Append(
        CCFLAGS=[
            '/wd4334',  # '<<': result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
            '/wd4116',  # unnamed type definition in parentheses
            '/wd4146',  # unary minus operator applied to unsigned type, result still unsigned
            '/wd4715',  # not all control paths return a value
            '/wd4200',  # nonstandard extension used: zero-sized array in struct/union
            '/wd4312',  # 'reinterpret_cast': conversion from 'unsigned int' to 'void *' of greater size
            '/wd4090',  # 'function': different 'const' qualifiers
        ],
        CPPDEFINES=[
            '_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING',
        ],
    )

grpc_root = grpc_env.Dir(".").srcnode()

upb_env = grpc_env.Clone()
upb_env.Append(
    CPPPATH=[
        grpc_root.Dir('dist/third_party/upb'),
        grpc_root.Dir('dist/third_party/utf8_range'),
        grpc_root.Dir('dist/src/core/ext/upb-generated'),
        grpc_root.Dir('dist/src/core/ext/upbdefs-generated'),
    ], )


address_sorting_env = grpc_env.Clone()
address_sorting_env.Append(CPPPATH=[
    grpc_root.Dir('dist/third_party/address_sorting/include'),
], )


grpc_env.Append(
    CPPPATH=[
        grpc_root.Dir('dist'),
        grpc_env.Dir('dist').get_path(),
        grpc_root.Dir('dist/include'),
        grpc_root.Dir('dist/third_party/upb'),
        grpc_root.Dir('dist/third_party/xxhash'),
        grpc_root.Dir('dist/src/core/ext/upb-generated'),
        grpc_root.Dir('dist/src/core/ext/upbdefs-generated'),
        grpc_root.Dir('dist/third_party/address_sorting/include'),
        grpc_root.Dir('dist/third_party/address_sorting/include'),
        grpc_root.Dir('dist/third_party/utf8_range'),
    ], )

protobuf_plugin_env = grpc_env.Clone(NINJA_GENSOURCE_INDEPENDENT=True)

gpr_env = grpc_env.Clone()

# older rhel7 platforms with older glibc give a warning `__warn_memset_zero_len` which
# can not be selectively repressed, so we are disabling all warnings for this library.
if gpr_env['TARGET_ARCH'] in ['x86_64', 's390x', 'ppc64le']:
    gpr_env.Append(
        CCFLAGS=[
            '-Wno-error',
        ],
        LINKFLAGS=[
            '-Wl,--no-fatal-warnings',
        ],
    )

grpcxx_env = grpc_env.Clone()

grpcxx_env.AppendUnique(
    PROTOC_GEN_TYPES=['cpp'], PROTOC_PLUGINS={
        'grpc': {
            'plugin': '$PROTOC_GRPC_PLUGIN',
            'options': ['generate_mock_code=true'],
            'exts': ['.grpc.pb.cc', '.grpc.pb.h'],
        },
    }, CPPPATH=[grpcxx_env.Dir('.')])

grpc_unittest_env = grpc_env.Clone()
grpc_unittest_env.InjectThirdParty(libraries=['fmt', 'variant', 'boost', 'safeint'])

# purposely changing the gen dir as an example and to excerise setting gen dirs
# this causes the helloworld to gen in the $BUILD_DIR/third_party/grpc dir
# instead of the dist/examples/protos dir (adjacent to the helloworkd.proto)
grpc_unittest_env.AppendUnique(
    PROTOC_GEN_TYPES=[['cpp', grpc_unittest_env.Dir('.')]], PROTOC_PLUGINS={
        'grpc': {
            'plugin': '$PROTOC_GRPC_PLUGIN',
            'options': ['generate_mock_code=true'],
            'gen_out': grpc_unittest_env.Dir('.'),
            'exts': ['.grpc.pb.cc', '.grpc.pb.h'],
        },
    }, CPPPATH=[grpc_unittest_env.Dir('.')])

grpc_unittest_env.Append(CPPPATH=[
    '#src',
    '$BUILD_DIR',
    '#$BAZEL_OUT_DIR/src'
    '#$BAZEL_OUT_DIR'
    '#$BAZEL_OUT_DIR/src/'
    '#$BAZEL_OUT_DIR/'
    '#/bazel-bin',
    '#/bazel-bin/src',
    '#/bazel-bin/',
    '#/bazel-bin/src/',
    '#/bazel-bin/src/third_party/grpc/dist/examples/protos'
], )

grpc_unittest_env.CppUnitTest(
    target='grpc_lib_test',
    source=[
        'grpc_source_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        'grpc++_reflection',
        "helloworld_cc_grpc"
    ],
    SYSLIBDEPS=[
        'ssl',
        'crypto',
    ],
)

grpc_unittest_env.BazelProgram(
    target="grpc_cpp_plugin",
    source=[],
    LIBDEPS=[],
)
