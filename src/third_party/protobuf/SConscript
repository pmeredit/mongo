Import('env')
Import('debugBuild')
protobuf_env = env.Clone(NINJA_GENSOURCE_INDEPENDENT=True)

protobuf_env.InjectThirdParty(libraries=['abseil-cpp', 'zlib'])

protobuf_env.Append(CPPDEFINES=[
    'HAVE_CONFIG_H',
    ('HAVE_ZLIB', '1'),
    ('PIC', '1'),
], )

if protobuf_env.ToolchainIs('gcc', 'clang'):
    protobuf_env.Append(
        CPPDEFINES=[
            ('HAVE_PTHREAD', '1'),
        ],
        CCFLAGS=[
            '-Wno-sign-compare',
            '-Wno-overloaded-virtual',
        ],
    )
    if debugBuild:
        protobuf_env.Append(CCFLAGS=['-Wno-error'])

if protobuf_env.ToolchainIs('gcc'):
    protobuf_env.Append(
        CPPDEFINES=[],
        CCFLAGS=[
            '-Wno-stringop-overflow',
            '-Wno-error=deprecated',
            '-Wno-error=attributes',
        ],
    )

if protobuf_env.ToolchainIs('msvc'):
    protobuf_env.Append(
        CCFLAGS=[
            '/wd4018',  # signed/unsigned mismatch
            '/wd4065',  # switch statement contains 'default' but no 'case' labels
            '/wd4146',  # unary minus operator applied to unsigned type, result still unsigned
        ],
        CPPDEFINES=[
            '_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING',
        ],
    )

protobuf_root = protobuf_env.Dir(".").srcnode()
protobuf_platform = protobuf_root.Dir("platform/${TARGET_OS}_${TARGET_ARCH}")
protobuf_env.Append(CPPPATH=[
    protobuf_root.Dir("dist"),
    protobuf_root.Dir("dist/src"),
], )

protobuf_env.BazelProgram(
    target="protobuf_compiler",
    source=[],
    LIBDEPS=[],
)

# Passing this up to the main env
env['PROTOC_DESCRIPTOR_PROTO'] = protobuf_env.File(
    "dist/src/google/protobuf/descriptor.proto").abspath
